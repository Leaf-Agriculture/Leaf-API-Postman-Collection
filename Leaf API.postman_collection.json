{
	"info": {
		"_postman_id": "876ba292-936a-434e-b254-26a07b38df56",
		"name": "Leaf API",
		"description": "Leaf API Postman Collection\n\n\n- Import Postman Collection\n- Import Environment Variables\n- Register with Leaf \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVersion 0.0.1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31093199"
	},
	"item": [
		{
			"name": "Quickstart",
			"item": [
				{
					"name": "Get your Leaf Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"pm.environment.set(\"leaf_token\", jsonData.id_token);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{leaf_email}}\",\n  \"password\": \"{{leaf_pass}}\",\n  \"rememberMe\": true\n}\n// if rememberMe = \"true\", your Leaf Token lasts 30 days. If \"false\", your Leaf Token lasts 24h."
						},
						"url": {
							"raw": "https://{{leaf_api_url}}/api/authenticate",
							"protocol": "https",
							"host": [
								"{{leaf_api_url}}"
							],
							"path": [
								"api",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all fields",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{leaf_token}}"
							}
						],
						"url": {
							"raw": "https://{{leaf_api_url}}/services/fields/api/fields",
							"protocol": "https",
							"host": [
								"{{leaf_api_url}}"
							],
							"path": [
								"services",
								"fields",
								"api",
								"fields"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all operation files",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{leaf_token}}"
							}
						],
						"url": {
							"raw": "https://{{leaf_api_url}}/services/operations/api/files",
							"protocol": "https",
							"host": [
								"{{leaf_api_url}}"
							],
							"path": [
								"services",
								"operations",
								"api",
								"files"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get operation file by id",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{leaf_token}}"
							}
						],
						"url": {
							"raw": "https://{{leaf_api_url}}/services/operations/api/files/{{file_id}}",
							"protocol": "https",
							"host": [
								"{{leaf_api_url}}"
							],
							"path": [
								"services",
								"operations",
								"api",
								"files",
								"{{file_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get operation file summary",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{leaf_token}}"
							}
						],
						"url": {
							"raw": "https://{{leaf_api_url}}/services/operations/api/files/{{file_id}}/summary",
							"protocol": "https",
							"host": [
								"{{leaf_api_url}}"
							],
							"path": [
								"services",
								"operations",
								"api",
								"files",
								"{{file_id}}",
								"summary"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get operation file images",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{leaf_token}}"
							}
						],
						"url": {
							"raw": "https://{{leaf_api_url}}/services/operations/api/files/{{file_id}}/images",
							"protocol": "https",
							"host": [
								"{{leaf_api_url}}"
							],
							"path": [
								"services",
								"operations",
								"api",
								"files",
								"{{file_id}}",
								"images"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get merged operation file",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{leaf_token}}"
							}
						],
						"url": {
							"raw": "https://{{leaf_api_url}}/services/operations/api/files?origin=merged",
							"protocol": "https",
							"host": [
								"{{leaf_api_url}}"
							],
							"path": [
								"services",
								"operations",
								"api",
								"files"
							],
							"query": [
								{
									"key": "origin",
									"value": "merged"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all sat-monitored fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{leaf_token}}"
							}
						],
						"url": {
							"raw": "https://{{leaf_api_url}}/services/satellite/api/fields",
							"protocol": "https",
							"host": [
								"{{leaf_api_url}}"
							],
							"path": [
								"services",
								"satellite",
								"api",
								"fields"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get satellite images",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{leaf_token}}"
							}
						],
						"url": {
							"raw": "https://{{leaf_api_url}}/services/satellite/api/fields/{{sat_external_id}}/processes",
							"protocol": "https",
							"host": [
								"{{leaf_api_url}}"
							],
							"path": [
								"services",
								"satellite",
								"api",
								"fields",
								"{{sat_external_id}}",
								"processes"
							]
						}
					},
					"response": []
				}
			],
			"description": "Leaf Auth\nGet Leaf Token\nAfter registering with Leaf, you can get your Leaf token, which must be included in all requests to Leaf’s API as an authorization header.\n\tHow to get your Leaf Token:\nUpdate current value of \"leaf_email\" variable to your Leaf account email\nUpdate current value of \"leaf_pass\" variable to your Leaf account password\nHit \"Send\"\n\nAn \"id_token\" should be returned. It will be automatically transferred to the current value of \"leaf_token\" to be used in all calls to Leaf's API",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "API Reference",
			"item": [
				{
					"name": "Leaf auth",
					"item": [
						{
							"name": "Get your Leaf Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"pm.environment.set(\"leaf_token\", jsonData.id_token);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{leaf_email}}\",\n  \"password\": \"{{leaf_pass}}\",\n  \"rememberMe\": true\n}\n// if rememberMe = \"true\", your Leaf Token lasts 30 days. If \"false\", your Leaf Token lasts 24h."
								},
								"url": {
									"raw": "https://{{leaf_api_url}}/api/authenticate",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"api",
										"authenticate"
									]
								}
							},
							"response": []
						}
					],
					"description": "Leaf Auth\nGet Leaf Token\nAfter registering with Leaf, you can get your Leaf token, which must be included in all requests to Leaf’s API as an authorization header.\n\tHow to get your Leaf Token:\nUpdate current value of \"leaf_email\" variable to your Leaf account email\nUpdate current value of \"leaf_pass\" variable to your Leaf account password\nHit \"Send\"\n\nAn \"id_token\" should be returned. It will be automatically transferred to the current value of \"leaf_token\" to be used in all calls to Leaf's API",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Providers auth",
					"item": [
						{
							"name": "JohnDeere auth",
							"item": [
								{
									"name": "1. Get John Deere auth URL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"clientKey\": \"{{jd_client_id}}\",\n    \"clientSecret\": \"{{jd_client_secret}}\",\n    \"clientRedirectUrl\": \"{{jd_redirect_url}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{leaf_auth_jd}}/get_url",
											"protocol": "https",
											"host": [
												"{{leaf_auth_jd}}"
											],
											"path": [
												"get_url"
											]
										},
										"description": "Access token (and refresh token) request as detailed on step 4 of the medium post"
									},
									"response": []
								},
								{
									"name": "2. Get John Deere Tokens",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"jd_access_token\", jsonData.access_token);",
													"pm.environment.set(\"jd_refresh_token\", jsonData.refresh_token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "{{leaf_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"clientKey\": \"{{jd_client_id}}\",\n    \"clientSecret\": \"{{jd_client_secret}}\",\n    \"responseUrl\": \"{{jd_response_url}}\",\n    \"clientRedirectUrl\": \"{{jd_redirect_url}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{leaf_auth_jd}}/get_token",
											"protocol": "https",
											"host": [
												"{{leaf_auth_jd}}"
											],
											"path": [
												"get_token"
											]
										},
										"description": "Access token (and refresh token) request as detailed on step 4 of the medium post"
									},
									"response": []
								}
							],
							"description": "John Deere Auth\nTo get a better sense of the authentication process with John Deere and the results, check our Medium Post (https://medium.com/leaf-agriculture/how-to-use-leafs-api-to-retrieve-machinery-data-from-john-deere-fb1ba331d089)\n1. Get John Deere auth URL\nIn Step 1 we will be generating tokens from John Deere. The goal In step 2 is we will get our john deere token_id and token_secret\n\nToken Verifier\nIn step 1 we will get a temporary \"token verifier\" from John Deere that confirms a user’s authentication of your application to access their John Deere data and generate credentials. We get that verifier by going through their authentication flow (oauth2).\nBefore generating the authentication URL, please:\nUpdate current value of \"jd_client_key\" to your app's client key on John Deere\nUpdate current value of \"jd_client_secret\" to your app's client secret on John Deere\nUpdate current value of \"jd_callback_url\" to your app's callback_url on John Deere\n\nThen, to generate the authentication URL your application will send to your user so they can authorize access to their account files you can use the included step 2 in the Postman Collection. Change \"client_key\" and \"client_secret\" variables to yours received from John Deere when you created an app on your developer account with them and redirect_uri to a uri the \"token verifier\" will be sent after the user authorizes your application.\nHit \"Send\".\nRedirect your user to the url included in the response.\nThey will authenticate and be redirected to the redirect_url\nCopy the entire url you were redirected to. It looks like:\nhttps://leafagriculture.com.br/?oauth_token=TOKEN&oauth_verifier=CODE\nPaste it in the environment variable \"jd_response_url\"\n2. Get John Deere Tokens\nAfter updating the “jd_response_url” in Postman you can submit your credentials and receive your tokens:\nHit \"Send\"\n\n\"token_id\" and \"token_secret_key\" will be automatically transferred to \"jd_token_id\" and \"jd_token_secret\" environment variables and will be used in the next step.\n\n3. Add John Deere ID\nNow we can create a Developer-User pair credentials ID that will allow you to access your user’s John Deere data. We first add the John Deere credentials to Leaf API, just:\nHit \"Send\"\nAll the info needed has already been filled automatically in Step 2.\n\nAn \"id\" for the credentials you just created will be returned. This \"id\" will be automatically transferred to the value of \"jd_credentials_id\" to be used in the next step.\n",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "ClimateFieldView auth",
							"item": [
								{
									"name": "1. Get CFV auth URL",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"client_id\": \"{{cfv_client_id}}\",\n\t\"redirect_uri\": \"{{cfv_redirect_url}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{leaf_auth_cfv}}/url",
											"protocol": "https",
											"host": [
												"{{leaf_auth_cfv}}"
											],
											"path": [
												"url"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. Get CFV Tokens",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"cfv_access_token\", jsonData.access_token);",
													"pm.environment.set(\"cfv_refresh_token\", jsonData.refresh_token);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Here we calculate the Authorization Header, it is calculated as:",
													"// Basic {base64_encode($clientId:$clientSecret)} ",
													"",
													"var id = pm.environment.get('cfv_client_id');",
													"var sec = pm.environment.get('cfv_client_secret');",
													"",
													"var id_sec = id + \":\" + sec;",
													"var id_sec_64 = btoa(id_sec);  // encodes to Base64",
													"",
													"var cfv_auth_header = \"Basic \";",
													"var cfv_auth_header = cfv_auth_header + id_sec_64;",
													"",
													"pm.environment.set('cfv_auth_header', cfv_auth_header);",
													"",
													"// to see if it's working, check that ",
													"// clientId being Aladdin and clientSecret being OpenSesame, ",
													"// will generate the Authorization Header below",
													"// Basic QWxhZGRpbjpPcGVuU2VzYW1l"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{cfv_auth_header}}",
												"description": "Basic base64(clientId:clientSecret)",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "code",
													"value": "{{cfv_code}}",
													"description": "get code from redirect url and put here",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{cfv_redirect_url}}",
													"description": "same as when on the url you sent to user ",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "authorization_code",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://api.climate.com/api/oauth/token",
											"protocol": "https",
											"host": [
												"api",
												"climate",
												"com"
											],
											"path": [
												"api",
												"oauth",
												"token"
											]
										},
										"description": "Access token (and refresh token) request as detailed on step 4 of the medium post"
									},
									"response": []
								}
							],
							"description": "Climate Field View Auth\nTo get a better sense of the authentication process with Climate Field View and the results, check our Medium Post (https://medium.com/leaf-agriculture/how-to-use-leafs-api-to-retrieve-machinery-data-from-climate-fieldview-dda921f40291)\n\n1. Get CFV auth URL\nWe will be generating a url to redirect your user to authenticate with Climate.\nUpdate environment variables \"cfv_client_id\" and \"cfv_client_secret\" to your CFV developer account credentials\nUpdate environment variable \"cfv_redirect_url\" to your application's backend\nRedirect your user to the script's output url.\nThey will authenticate and be redirected to the redirect_uri\nA code will be sent to that cfv_redirect_url. We will need this code Step 2.\nCopy the code value \nNote: this code expires after 1 minute.\n\nPaste code value to environment variable \"cfv_code\"\n\n2. Get CFV tokens\nHit \"Send\"\n\nA lot of information will be returned. The important ones are \"access_token\" and \"refresh_token. These will be automatically transferred to \"cfv_access_token\" and \"cfv_refresh_token\" environment variables and will be used in the next step.\n\t\n3. Add CFV credentials\nNow we can create a Developer-User pair credentials ID that will allow you to access your user’s Climate data. We first add the Climate credentials to Leaf API, to do that:\nHit \"Send\"\n\nAn \"id\" for the credentials you just created will be returned. This \"id\" will be automatically transferred to the value of \"cfv_credentials_id\" to be used in the next step.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "CNHi auth",
							"item": [
								{
									"name": "1. Get CNHI auth URL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"client_id\": \"{{cnhi_client_id}}\",\n    \"client_secret\": \"{{cnhi_client_secret}}\",\n    \"client_redirect_url\": \"{{cnhi_client_redirect_url}}\",\n    \"production\": {{cnhi_production_client}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{leaf_auth_cnhi}}/get_url",
											"protocol": "https",
											"host": [
												"{{leaf_auth_cnhi}}"
											],
											"path": [
												"get_url"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. Get CNHI Refresh Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"cnhi_refresh_token\", jsonData.refresh_token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"client_id\": \"{{cnhi_client_id}}\",\n    \"client_secret\": \"{{cnhi_client_secret}}\",\n    \"client_redirect_url\": \"{{cnhi_client_redirect_url}}\",\n    \"response_url\": \"{{cnhi_response_url}}\",\n    \"production\": {{cnhi_production_client}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{leaf_auth_cnhi}}/get_token",
											"protocol": "https",
											"host": [
												"{{leaf_auth_cnhi}}"
											],
											"path": [
												"get_token"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Raven auth",
							"item": [
								{
									"name": "Get Raven auth URL",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"client_id\": \"{{raven_client_id}}\",\n    \"client_redirect_url\": \"{{raven_redirect_url}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{leaf_auth_raven}}/get_url",
											"protocol": "https",
											"host": [
												"{{leaf_auth_raven}}"
											],
											"path": [
												"get_url"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Raven Token",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"client_id\": \"{{raven_client_id}}\",\n    \"client_secret\": \"{{raven_client_secret}}\",\n    \"redirect_url\": \"{{raven_redirect_url}}\",\n    \"code\": \"{{raven_code}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{leaf_auth_raven}}/get_token",
											"protocol": "https",
											"host": [
												"{{leaf_auth_raven}}"
											],
											"path": [
												"get_token"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Stara auth",
							"item": [
								{
									"name": "Get Stara API key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"stara_api_key\", jsonData.key);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "user",
													"value": "{{stara_username}}",
													"type": "text"
												},
												{
													"key": "pwd",
													"value": "{{stara_password}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://v2apitelemetria.telemetriastara.com.br/autenticacao",
											"protocol": "https",
											"host": [
												"v2apitelemetria",
												"telemetriastara",
												"com",
												"br"
											],
											"path": [
												"autenticacao"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Stara Tokens",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"stara_access_token\", jsonData.X_access_token);",
													"pm.environment.set(\"stara_refresh_token\", jsonData.refresh_Token);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "accessTokenClient",
													"value": "{{stara_access_token_client}}",
													"type": "text"
												},
												{
													"key": "apiKey",
													"value": "{{stara_api_key}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://v2apitelemetria.telemetriastara.com.br/token",
											"protocol": "https",
											"host": [
												"v2apitelemetria",
												"telemetriastara",
												"com",
												"br"
											],
											"path": [
												"token"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Trimble auth",
							"item": [
								{
									"name": "Get Trimble auth URL",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"application_name\": \"{{trimble_app_name}}\",\n    \"client_id\": \"{{trimble_client_id}}\",\n    \"client_redirect_url\": \"{{trimble_redirect_url}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{leaf_auth_trimble}}/get_url",
											"protocol": "https",
											"host": [
												"{{leaf_auth_trimble}}"
											],
											"path": [
												"get_url"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Trimble Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"trimble_refresh_token\", jsonData.refresh_token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"client_id\": \"{{trimble_client_id}}\",\n    \"redirect_url\": \"{{trimble_redirect_url}}\",\n    \"client_secret\": \"{{trimble_client_secret}}\",\n    \"code\": \"{{trimble_code}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{leaf_auth_trimble}}/get_token",
											"protocol": "https",
											"host": [
												"{{leaf_auth_trimble}}"
											],
											"path": [
												"get_token"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Lindsay auth",
							"item": [
								{
									"name": "1. Get Lindsay auth URL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"lindsay_code_verifier\", jsonData.codeVerifier);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"clientId\": \"{{lindsay_client_id}}\",\n    \"redirectUri\": \"{{lindsay_redirect_uri}}\",\n    \"environment\": \"STAGE\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{leaf_auth_helper}}/lindsay/url",
											"protocol": "https",
											"host": [
												"{{leaf_auth_helper}}"
											],
											"path": [
												"lindsay",
												"url"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. Get Lindsay Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"trimble_refresh_token\", jsonData.refresh_token);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"clientId\": \"{{lindsay_client_id}}\",\n    \"clientSecret\": \"{{lindsay_client_secret}}\",\n    \"redirectUri\": \"{{lindsay_redirect_uri}}\",\n    \"responseUrl\": \"{{lindsay_response_url}}\",\n    \"codeVerifier\": \"{{lindsay_code_verifier}}\",\n    \"environment\": \"STAGE\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{leaf_auth_helper}}/lindsay/token",
											"protocol": "https",
											"host": [
												"{{leaf_auth_helper}}"
											],
											"path": [
												"lindsay",
												"token"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Leaf User",
					"item": [
						{
							"name": "Provider Credentials",
							"item": [
								{
									"name": "ClimateFieldView",
									"item": [
										{
											"name": "Get ClimateFieldView credentials of the LeafUser",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Successful GET request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/users/{{leaf_user_id}}/climate-field-view-credentials",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"users",
														"{{leaf_user_id}}",
														"climate-field-view-credentials"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add ClimateFieldView credentials to the LeafUser",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([201]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"clientId\": \"{{cfv_client_id}}\",\n    \"clientSecret\": \"{{cfv_client_secret}}\",\n    \"apiKey\": \"{{cfv_api_key}}\",\n    \"refreshToken\": \"{{cfv_refresh_token}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/users/{{leaf_user_id}}/climate-field-view-credentials",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"users",
														"{{leaf_user_id}}",
														"climate-field-view-credentials"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete ClimateFieldView credentials of the LeafUser",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Successful DELETE request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([204,404]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/users/{{leaf_user_id}}/climate-field-view-credentials",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"users",
														"{{leaf_user_id}}",
														"climate-field-view-credentials"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get ClimateFieldView credentials Events",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{leaf_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/users/{{leaf_user_id}}/climate-field-view-credentials/events",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"users",
														"{{leaf_user_id}}",
														"climate-field-view-credentials",
														"events"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "JohnDeere",
									"item": [
										{
											"name": "Get JohnDeere credentials of the LeafUser",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Successful GET request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/users/{{leaf_user_id}}/john-deere-credentials",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"users",
														"{{leaf_user_id}}",
														"john-deere-credentials"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add JohnDeere credentials to the LeafUser",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([201]);",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"clientKey\": \"{{jd_client_id}}\",\n    \"clientSecret\": \"{{jd_client_secret}}\",\n    \"refreshToken\": \"{{jd_refresh_token}}\",\n    \"clientEnvironment\": \"{jd_client_environment}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/users/{{leaf_user_id}}/john-deere-credentials",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"users",
														"{{leaf_user_id}}",
														"john-deere-credentials"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete JohnDeere credentials of the LeafUser",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Successful DELETE request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([204,404]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/users/{{leaf_user_id}}/john-deere-credentials",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"users",
														"{{leaf_user_id}}",
														"john-deere-credentials"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get JohnDeere credentials Events",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{leaf_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/users/{{leaf_user_id}}/john-deere-credentials/events",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"users",
														"{{leaf_user_id}}",
														"john-deere-credentials",
														"events"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "AgLeader",
									"item": [
										{
											"name": "Get AgLeader credentials from Leaf User",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/users/{{leaf_user_id}}/ag-leader-credentials",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"users",
														"{{leaf_user_id}}",
														"ag-leader-credentials"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add AgLeader credentials to a Leaf User",
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"accessToken\": \"{{agleader_bearer_token}}\",\n  \"refreshToken\": \"{{agleader_refresh_token}}\",\n  \"publicKey\": \"{{agleader_public_key}}\",\n  \"privateKey\": \"{{agleader_private_key}}\"\n}"
												},
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/users/{{leaf_user_id}}/ag-leader-credentials",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"users",
														"{{leaf_user_id}}",
														"ag-leader-credentials"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete AgLeader credentials from a Leaf User",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/users/{{leaf_user_id}}/ag-leader-credentials",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"users",
														"{{leaf_user_id}}",
														"ag-leader-credentials"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get AgLeader credentials Events",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{leaf_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/users/{{leaf_user_id}}/ag-leader-credentials/events",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"users",
														"{{leaf_user_id}}",
														"ag-leader-credentials",
														"events"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Agvance",
									"item": [
										{
											"name": "Get Agvance credentials from Leaf User",
											"request": {
												"method": "GET",
												"header": [
													{
														"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/users/{{leaf_user_id}}/agvance-credentials",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"users",
														"{{leaf_user_id}}",
														"agvance-credentials"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add Agvance credentials to a Leaf User",
											"request": {
												"method": "POST",
												"header": [
													{
														"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"apiKey\": \"{{agvance_api_key}}\",\n  \"clientEnvironment\": \"STAGE or PRODUCTION\",\n  \"databaseId\": \"{{agvance_database_id}}\",\n  \"password\": \"{{agvance_password}}\",\n  \"username\": \"{{agvance_username}}\"\n}"
												},
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/users/{{leaf_user_id}}/agvance-credentials",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"users",
														"{{leaf_user_id}}",
														"agvance-credentials"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete Agvance credentials from a Leaf User",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/users/{{leaf_user_id}}/agvance-credentials",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"users",
														"{{leaf_user_id}}",
														"agvance-credentials"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Agvance credentials Events",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{leaf_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/users/{{leaf_user_id}}/agvance-credentials/events",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"users",
														"{{leaf_user_id}}",
														"agvance-credentials",
														"events"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "CNHi",
									"item": [
										{
											"name": "Get CNHi credentials of the LeafUser",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Successful GET request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/users/{{leaf_user_id}}/cnhi-credentials",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"users",
														"{{leaf_user_id}}",
														"cnhi-credentials"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add CNHi credentials to LeafUser",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([201]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"clientId\": \"{{cnhi_client_id}}\" ,\n  \"clientSecret\": \"{{cnhi_client_secret}}\",\n  \"clientEnvironment\": \"{{cnhi_client_environment}}\",\n  \"subscriptionKey\": \"{{cnhi_subscription_key}}\",\n  \"refreshToken\": \"{{cnhi_refresh_token}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/users/{{leaf_user_id}}/cnhi-credentials",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"users",
														"{{leaf_user_id}}",
														"cnhi-credentials"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete CNHi credentials of the LeafUser",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Successful DELETE request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([204,404]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/users/{{leaf_user_id}}/cnhi-credentials",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"users",
														"{{leaf_user_id}}",
														"cnhi-credentials"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get CNHI credentials Events",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{leaf_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/users/{{leaf_user_id}}/cnhi-credentials/events",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"users",
														"{{leaf_user_id}}",
														"cnhi-credentials",
														"events"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Lindsay",
									"item": [
										{
											"name": "Get Lindsay credentials of the LeafUser",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Successful GET request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/users/{{leaf_user_id}}/lindsay-credentials",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"users",
														"{{leaf_user_id}}",
														"lindsay-credentials"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add Lindsay credentials to the LeafUser",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([201]);",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"clientId\": \"{{lindsay_client_id}}\",\n    \"clientSecret\": \"{{lindsay_client_secret}}\",\n    \"refreshToken\": \"{{lindsay_refresh_token}}\",\n    \"clientEnvironment\": \"STAGE\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/users/{{leaf_user_id}}/lindsay-credentials",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"users",
														"{{leaf_user_id}}",
														"lindsay-credentials"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete Lindsay credentials of the LeafUser",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Successful DELETE request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([204,404]);",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/users/{{leaf_user_id}}/lindsay-credentials",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"users",
														"{{leaf_user_id}}",
														"lindsay-credentials"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Lindsay credentials Events",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{leaf_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/users/{{leaf_user_id}}/lindsay-credentials/events",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"users",
														"{{leaf_user_id}}",
														"lindsay-credentials",
														"events"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Raven",
									"item": [
										{
											"name": "Get Raven credentials of the LeafUser",
											"request": {
												"method": "GET",
												"header": [
													{
														"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/users/{{leaf_user_id}}/raven-credentials",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"users",
														"{{leaf_user_id}}",
														"raven-credentials"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add Raven credentials to the LeafUser",
											"request": {
												"method": "POST",
												"header": [
													{
														"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"clientId\": \"{{raven_client_id}}\",\n    \"clientSecret\": \"{{raven_client_secret}}\",\n    \"refreshToken\":  \"{{raven_refresh_token}}\"\n}"
												},
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/users/{{leaf_user_id}}/raven-credentials",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"users",
														"{{leaf_user_id}}",
														"raven-credentials"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete Raven credentials of the LeafUser",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/users/{{leaf_user_id}}/raven-credentials",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"users",
														"{{leaf_user_id}}",
														"raven-credentials"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Raven credentials Events",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{leaf_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/users/{{leaf_user_id}}/raven-credentials/events",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"users",
														"{{leaf_user_id}}",
														"raven-credentials",
														"events"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "RavenSlingshot",
									"item": [
										{
											"name": "Get RavenSlingshot credentials of the LeafUser",
											"request": {
												"method": "GET",
												"header": [
													{
														"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/users/{{leaf_user_id}}/raven-slingshot-credentials",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"users",
														"{{leaf_user_id}}",
														"raven-slingshot-credentials"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add RavenSlingshot credentials to the LeafUser",
											"request": {
												"method": "POST",
												"header": [
													{
														"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"apiKey\": \"{{ravenslingshot_api_key}}\",\n    \"accessKey\": \"{{ravenslingshot_access_key}}\",\n    \"sharedSecret\":  \"{{ravenslingshot_shared_secret}}\"\n}"
												},
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/users/{{leaf_user_id}}/raven-slingshot-credentials",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"users",
														"{{leaf_user_id}}",
														"raven-slingshot-credentials"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete RavenSlingshot credentials of the LeafUser",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/users/{{leaf_user_id}}/raven-slingshot-credentials",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"users",
														"{{leaf_user_id}}",
														"raven-slingshot-credentials"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get RavenSlingshot credentials Events",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{leaf_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/users/{{leaf_user_id}}/raven-slingshot-credentials/events",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"users",
														"{{leaf_user_id}}",
														"raven-slingshot-credentials",
														"events"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Sentera",
									"item": [
										{
											"name": "Get Sentera credentials from Leaf User",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/users/{{leaf_user_id}}/sentera-credentials",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"users",
														"{{leaf_user_id}}",
														"sentera-credentials"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add Sentera credentials to a Leaf User",
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"username\": \"{{sentera_username}}\" ,\n  \"password\": \"{{sentera_password}}\",\n  \"organizationName\": \"{{sentera_organization_name}}\"\n}"
												},
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/users/{{leaf_user_id}}/sentera-credentials",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"users",
														"{{leaf_user_id}}",
														"sentera-credentials"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete Sentera credentials from a Leaf User",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/users/{{leaf_user_id}}/sentera-credentials",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"users",
														"{{leaf_user_id}}",
														"sentera-credentials"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Sentera credentials Events",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{leaf_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/users/{{leaf_user_id}}/sentera-credentials/events",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"users",
														"{{leaf_user_id}}",
														"sentera-credentials",
														"events"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Stara",
									"item": [
										{
											"name": "Get Stara credentials of the LeafUser",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Successful GET request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/users/{{leaf_user_id}}/stara-credentials",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"users",
														"{{leaf_user_id}}",
														"stara-credentials"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add Stara credentials to the LeafUser",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([201]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"apiKey\": \"{{stara_api_key}}\",\n    \"accessToken\": \"{{stara_access_token}}\",\n    \"accessTokenClient\": \"{{stara_access_token_client}}\",\n    \"refreshToken\": \"{{stara_refresh_token}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/users/{{leaf_user_id}}/stara-credentials",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"users",
														"{{leaf_user_id}}",
														"stara-credentials"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete Stara credentials of the LeafUser",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Successful DELETE request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([204,404]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/users/{{leaf_user_id}}/stara-credentials",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"users",
														"{{leaf_user_id}}",
														"stara-credentials"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Stara credentials Events",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{leaf_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/users/{{leaf_user_id}}/stara-credentials/events",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"users",
														"{{leaf_user_id}}",
														"stara-credentials",
														"events"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Trimble",
									"item": [
										{
											"name": "Get Trimble credentials of the LeafUser",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Successful GET request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/users/{{leaf_user_id}}/trimble-credentials",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"users",
														"{{leaf_user_id}}",
														"trimble-credentials"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add Trimble credentials to the LeafUser",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([201]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"clientId\": \"{{trimble_client_id}}\",\n    \"clientSecret\": \"{{trimble_client_secret}}\",\n    \"refreshToken\": \"{{trimble_refresh_token}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/users/{{leaf_user_id}}/trimble-credentials",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"users",
														"{{leaf_user_id}}",
														"trimble-credentials"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete Trimble credentials of the LeafUser",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Successful DELETE request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([204,404]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/users/{{leaf_user_id}}/trimble-credentials",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"users",
														"{{leaf_user_id}}",
														"trimble-credentials"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Trimble credentials Events",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{leaf_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/users/{{leaf_user_id}}/trimble-credentials/events",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"users",
														"{{leaf_user_id}}",
														"trimble-credentials",
														"events"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Valley",
									"item": [
										{
											"name": "Get Valley credentials of the LeafUser",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Successful GET request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/users/{{leaf_user_id}}/valley-credentials",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"users",
														"{{leaf_user_id}}",
														"valley-credentials"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add Valley credentials to the LeafUser",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([201]);",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"apid\": \"{{valley_apid}}\",\n    \"initializationVector\": \"{{valley_initialization_vector}}\",\n    \"key\": \"{{valley_key}}\",\n    \"username\": \"{{valley_username}}\",\n    \"password\": \"{{valley_password}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/users/{{leaf_user_id}}/valley-credentials",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"users",
														"{{leaf_user_id}}",
														"valley-credentials"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete Valley credentials of the LeafUser",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Successful DELETE request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([204,404]);",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/users/{{leaf_user_id}}/valley-credentials",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"users",
														"{{leaf_user_id}}",
														"valley-credentials"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Valley credentials Events",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{leaf_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/users/{{leaf_user_id}}/valley-credentials/events",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"users",
														"{{leaf_user_id}}",
														"valley-credentials",
														"events"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Provider Organizations List",
									"item": [
										{
											"name": "Get John Deere Organizations List",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/users/{{leaf_user_id}}/organizations/JohnDeere",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"users",
														"{{leaf_user_id}}",
														"organizations",
														"JohnDeere"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Trimble Organizations List",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/users/{{leaf_user_id}}/organizations/Trimble",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"users",
														"{{leaf_user_id}}",
														"organizations",
														"Trimble"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Get all Leaf Users",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{leaf_api_url}}/services/usermanagement/api/users/",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"usermanagement",
										"api",
										"users",
										""
									],
									"query": [
										{
											"key": "page",
											"value": "0",
											"description": "Pagination parameter for selecting the page (integer)",
											"disabled": true
										},
										{
											"key": "size",
											"value": "20",
											"description": "Pagination parameter that specifies the size of each page (integer), default is 20, maximum is 100",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "asc",
											"description": "Sorting order of the results. Can be multivalue, the former takes precedence over the later. Can also specify order as `asc` or `desc` with `asc` being the default. Example: id,desc",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get specific Leaf User",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{leaf_api_url}}/services/usermanagement/api/users/{{leaf_user_id}}",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"usermanagement",
										"api",
										"users",
										"{{leaf_user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Leaf User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"{{leaf_user_id}}\",\n  \"name\": \"abc{{random_number}}\",\n  \"email\": \"abc{{random_number}}@sharklasers.com\",\n  \"address\": \"New York, NY 10004, US\",\n  \"phone\": \"123-456-7890\",\n  \"climateFieldViewCredentials\": {\n  \t\"id\":\"{{cfv_credentials_id}}\"\n  },\n  \"johnDeereCredentials\": {\n  \t\"id\": \"{{jd_credentials_id}}\"\n  },\n  \"cnhiCredentials\": {\n  \t\"id\": \"{{cnhi_credentials_id}}\"\n  }\n}"
								},
								"url": {
									"raw": "https://{{leaf_api_url}}/services/usermanagement/api/users/",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"usermanagement",
										"api",
										"users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Leaf User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}"
									}
								],
								"url": {
									"raw": "https://{{leaf_api_url}}/services/usermanagement/api/users/{{leaf_user_id}}",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"usermanagement",
										"api",
										"users",
										"{{leaf_user_id}}"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Leaf User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"pm.environment.set(\"leaf_user_id\", jsonData.id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"random_number\", _.random(1073741824, 2147483648))"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Ada Lovelace{{random_number}}\",\n  \"email\": \"AdaLovelace{{random_number}}@sharklasers.com\",\n  \"address\": \"New York, NY 10004, US\",\n  \"phone\": \"123-456-7890\"\n}"
								},
								"url": {
									"raw": "https://{{leaf_api_url}}/services/usermanagement/api/users/",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"usermanagement",
										"api",
										"users",
										""
									]
								}
							},
							"response": []
						}
					],
					"description": "Leaf User \t\nCreate Leaf User\nNow we have to attach credentials to a Leaf User. To do so, we can create a Leaf user and attach our John Deere and/or Climate Field View credentials via the credentials id. We can also attach credentials from other companies to this same user to query all available data by Grower/Farm/Field regardless of brand. \nUpdate (optional) fields \"address\", \"email\", \"name\" and \"phone\" with your user's information.\nWe have automatically included our “jd_credentials_id” to this call and attached it to this user.\nHit \"Send\" \n\n\tAlong with other information returned, there is an \"id\". This \"id\" is the leaf_user_id that will be used in the next (final) Step to query and access files.\n\nUpdate Leaf User\n\tTo update a Leaf User, let's say to add another provider credentials or change the user's address, we can use this PUT request. Since this method overwrites, remember to send all the user's information along with the information you want to add or update. For example, if you want to add John Deere credentials to a user that already has ClimateFieldView credentials, remember to specify both credentials ids.\n\nGet specific Leaf User\n\tWith this endpoint you can query all information on a specific Leaf User, such as their address, email, credentials, etc. To do so, update the value of the environment variable \"leaf_user_id\" to the Leaf User id you want to query.\n\nGet all Leaf Users\n\tWith this endpoint you can query all information on all your Leaf Users, such as their address, email, credentials, etc. Just hit 'send'.\n\n",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Configurations",
					"item": [
						{
							"name": "Leaf User",
							"item": [
								{
									"name": "Get leaf user config",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{leaf_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://{{leaf_api_url}}/services/config/api/configs/{{leaf_user_id}}",
											"protocol": "https",
											"host": [
												"{{leaf_api_url}}"
											],
											"path": [
												"services",
												"config",
												"api",
												"configs",
												"{{leaf_user_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create leaf user config",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "Bearer {{leaf_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"operationsImageCreation\": false,\n    \"geoimagesResolution\": 0.00001,\n    \"geoimagesShape\": \"SQUARE\",\n    \"geoimagesProjection\": \"EPSG:3857\",\n    \"geoimagesColorRamp\": {\n        \"0%\"  : [200,   0, 0],\n        \"35%\" : [255,  40, 0],\n        \"45%\" : [255, 150, 0],\n        \"55%\" : [255, 240, 0],\n        \"65%\" : [  0, 230, 0],\n        \"75%\" : [  0, 190, 0],\n        \"100%\": [  0, 130, 0],\n        \"nv\"  : [  0,   0, 0, 0]\n    },\n    \"fieldsAutoSync\": true,\n    \"fieldsAttachIntersection\": 0.01,\n    \"fieldsMergeIntersection\": 0.01\n}"
										},
										"url": {
											"raw": "https://{{leaf_api_url}}/services/config/api/configs/{{leaf_user_id}}",
											"protocol": "https",
											"host": [
												"{{leaf_api_url}}"
											],
											"path": [
												"services",
												"config",
												"api",
												"configs",
												"{{leaf_user_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update leaf user config",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "Bearer {{leaf_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"operationsImageCreation\": false,\n    \"geoimagesResolution\": 0.00001,\n    \"geoimagesShape\": \"ROUND\",\n    \"geoimagesProjection\": \"EPSG:3857\",\n    \"geoimagesColorRamp\": {\n        \"0%\"  : [200,   0, 0],\n        \"35%\" : [255,  40, 0],\n        \"45%\" : [255, 150, 0],\n        \"55%\" : [255, 240, 0],\n        \"65%\" : [  0, 230, 0],\n        \"75%\" : [  0, 190, 0],\n        \"100%\": [  0, 130, 0],\n        \"nv\"  : [  0,   0, 0, 0]\n    },\n    \"fieldsAutoSync\": true,\n    \"fieldsAttachIntersection\": 0.01,\n    \"fieldsMergeIntersection\": 0.01\n}"
										},
										"url": {
											"raw": "https://{{leaf_api_url}}/services/config/api/configs/{{leaf_user_id}}",
											"protocol": "https",
											"host": [
												"{{leaf_api_url}}"
											],
											"path": [
												"services",
												"config",
												"api",
												"configs",
												"{{leaf_user_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete leaf user config",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{leaf_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://{{leaf_api_url}}/services/config/api/configs/{{leaf_user_id}}",
											"protocol": "https",
											"host": [
												"{{leaf_api_url}}"
											],
											"path": [
												"services",
												"config",
												"api",
												"configs",
												"{{leaf_user_id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Api Owner",
							"item": [
								{
									"name": "Get default config",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{leaf_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://{{leaf_api_url}}/services/config/api/configs",
											"protocol": "https",
											"host": [
												"{{leaf_api_url}}"
											],
											"path": [
												"services",
												"config",
												"api",
												"configs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update default config",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{leaf_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"operationsImageCreation\": false,\n    \"geoimagesResolution\": 0.00001,\n    \"geoimagesShape\": \"SQUARE\",\n    \"geoimagesProjection\": \"EPSG:3857\",\n    \"geoimagesColorRamp\": {\n        \"0%\"  : [200,   0, 0],\n        \"35%\" : [255,  40, 0],\n        \"45%\" : [255, 150, 0],\n        \"55%\" : [255, 240, 0],\n        \"65%\" : [  0, 230, 0],\n        \"75%\" : [  0, 190, 0],\n        \"100%\": [  0, 130, 0],\n        \"nv\"  : [  0,   0, 0, 0]\n    },\n    \"fieldsAutoSync\": true,\n    \"fieldsAttachIntersection\": 0.01,\n    \"fieldsMergeIntersection\": 0.01\n}"
										},
										"url": {
											"raw": "https://{{leaf_api_url}}/services/config/api/configs",
											"protocol": "https",
											"host": [
												"{{leaf_api_url}}"
											],
											"path": [
												"services",
												"config",
												"api",
												"configs"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Field Boundary Management",
					"item": [
						{
							"name": "Fields",
							"item": [
								{
									"name": "Upload field file",
									"item": [
										{
											"name": "Upload a field file",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"pm.environment.set(\"upload_field_id\", jsonData.id);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"type": "file",
															"src": []
														}
													]
												},
												"url": {
													"raw": "https://{{leaf_api_url}}/services/uploadservice/api/upload?leafUserId={{leaf_user_id}}",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"uploadservice",
														"api",
														"upload"
													],
													"query": [
														{
															"key": "leafUserId",
															"value": "{{leaf_user_id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get all uploads",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/uploadservice/api/upload",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"uploadservice",
														"api",
														"upload"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get an upload",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/uploadservice/api/upload/{{upload_field_id}}",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"uploadservice",
														"api",
														"upload",
														"{{upload_field_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get the upload entries",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/uploadservice/api/upload/{{upload_field_id}}/entries",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"uploadservice",
														"api",
														"upload",
														"{{upload_field_id}}",
														"entries"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Get all fields",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{leaf_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://{{leaf_api_url}}/services/fields/api/fields?leafUserId={{leaf_user_id}}",
											"protocol": "https",
											"host": [
												"{{leaf_api_url}}"
											],
											"path": [
												"services",
												"fields",
												"api",
												"fields"
											],
											"query": [
												{
													"key": "leafUserId",
													"value": "{{leaf_user_id}}",
													"description": "your Leaf User id"
												},
												{
													"key": "provider",
													"value": "Leaf",
													"description": "filter by provider",
													"disabled": true
												},
												{
													"key": "type",
													"value": "ORIGINAL",
													"description": "JohnDeere, ClimateFieldView, Leaf, CNHi, AgLeader or Trimble",
													"disabled": true
												},
												{
													"key": "beforeCreatedTime",
													"value": "",
													"description": "filter by createdTime before the value",
													"disabled": true
												},
												{
													"key": "afterCreatedTime",
													"value": "",
													"description": "filter by createdTime after the value",
													"disabled": true
												},
												{
													"key": "beforeUpdatedTime",
													"value": "",
													"description": "filter by updatedTime before the value",
													"disabled": true
												},
												{
													"key": "afterUpdatedTime",
													"value": "",
													"description": "filter by updatedTime after the value",
													"disabled": true
												},
												{
													"key": "farmId",
													"value": "",
													"description": "only matches fields from this farmId (integer).",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get a field",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{leaf_token}}"
											}
										],
										"url": {
											"raw": "https://{{leaf_api_url}}/services/fields/api/users/{{leaf_user_id}}/fields/{{field_id}}",
											"protocol": "https",
											"host": [
												"{{leaf_api_url}}"
											],
											"path": [
												"services",
												"fields",
												"api",
												"users",
												"{{leaf_user_id}}",
												"fields",
												"{{field_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a Field",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"field_id\", jsonData.id);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{leaf_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"geometry\": {\n    \"coordinates\": \n    [[[\n        [-89.84392762184143,39.72439389620628],\n        [-89.84388470649719,39.71943436012731],\n        [-89.83928203582764,39.71951688444436],\n        [-89.83936786651611,39.725392361998416],\n        [-89.84392762184143,39.72439389620628]\n    ]]],\n    \"type\": \"MultiPolygon\"\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{leaf_api_url}}/services/fields/api/users/{{leaf_user_id}}/fields",
											"protocol": "https",
											"host": [
												"{{leaf_api_url}}"
											],
											"path": [
												"services",
												"fields",
												"api",
												"users",
												"{{leaf_user_id}}",
												"fields"
											]
										}
									},
									"response": []
								},
								{
									"name": "Upload Field to Provider",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{leaf_token}}"
											}
										],
										"url": {
											"raw": "https://{{leaf_api_url}}/services/fields/api/users/{{leaf_user_id}}/fields/{{field_id}}/integration/{{provider_name}}",
											"protocol": "https",
											"host": [
												"{{leaf_api_url}}"
											],
											"path": [
												"services",
												"fields",
												"api",
												"users",
												"{{leaf_user_id}}",
												"fields",
												"{{field_id}}",
												"integration",
												"{{provider_name}}"
											],
											"query": [
												{
													"key": "organizationId",
													"value": null,
													"description": "fill with the John Deere organization Id",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Fields by geometry",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successful POST request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{leaf_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"geometry\":\n   {\n     \"type\": \"MultiPolygon\",\n     \"coordinates\": [[[\n        [-89.84392762184143,39.72439389620628],\n        [-89.84388470649719,39.71943436012731],\n        [-89.83928203582764,39.71951688444436],\n        [-89.83936786651611,39.725392361998416],\n        [-89.84392762184143,39.72439389620628]\n    ]]]\n   }\n }\n"
										},
										"url": {
											"raw": "https://{{leaf_api_url}}/services/fields/api/fields/query/intersects",
											"protocol": "https",
											"host": [
												"{{leaf_api_url}}"
											],
											"path": [
												"services",
												"fields",
												"api",
												"fields",
												"query",
												"intersects"
											]
										},
										"description": "If there are fields that intersect with the given geometry, they will be returned."
									},
									"response": []
								},
								{
									"name": "Get intersection of fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successful POST request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{leaf_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\"{{field_id}}\", \"{{field_id}}\"]\n\n// [\"field1 id\", \"field2 id\", \"fieldN id\"]\n\n"
										},
										"url": {
											"raw": "https://{{leaf_api_url}}/services/fields/api/users/{{leaf_user_id}}/fields/intersect",
											"protocol": "https",
											"host": [
												"{{leaf_api_url}}"
											],
											"path": [
												"services",
												"fields",
												"api",
												"users",
												"{{leaf_user_id}}",
												"fields",
												"intersect"
											]
										},
										"description": "If there are fields that intersect with the given geometry, they will be returned."
									},
									"response": []
								},
								{
									"name": "Delete a field",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{leaf_token}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://{{leaf_api_url}}/services/fields/api/users/{{leaf_user_id}}/fields/{{field_id}}",
											"protocol": "https",
											"host": [
												"{{leaf_api_url}}"
											],
											"path": [
												"services",
												"fields",
												"api",
												"users",
												"{{leaf_user_id}}",
												"fields",
												"{{field_id}}"
											]
										},
										"description": "This will request to delete the field which its id is holded by variable `field-1-id`. You can specify a different\nfield by replacing `{{field-1-id}}` in the URL below."
									},
									"response": []
								},
								{
									"name": "Patch a field",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{leaf_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Sample Updated Name\",\n    \"farmId\": 1,\n    \"geometry\": {\n    \"coordinates\": \n    [[[\n        [-89.84392762184143,39.72439389620629],\n        [-89.84388470649719,39.71943436012731],\n        [-89.83928203582764,39.71951688444436],\n        [-89.83936786651611,39.725392361998416],\n        [-89.84392762184143,39.72439389620629]\n    ]]],\n    \"type\": \"MultiPolygon\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{leaf_api_url}}/services/fields/api/users/{{leaf_user_id}}/fields/{{field_id}}",
											"protocol": "https",
											"host": [
												"{{leaf_api_url}}"
											],
											"path": [
												"services",
												"fields",
												"api",
												"users",
												"{{leaf_user_id}}",
												"fields",
												"{{field_id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Boundaries",
							"item": [
								{
									"name": "Get all boundaries of a field",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "Bearer {{leaf_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://{{leaf_api_url}}/services/fields/api/users/{{leaf_user_id}}/fields/{{field_id}}/boundaries",
											"protocol": "https",
											"host": [
												"{{leaf_api_url}}"
											],
											"path": [
												"services",
												"fields",
												"api",
												"users",
												"{{leaf_user_id}}",
												"fields",
												"{{field_id}}",
												"boundaries"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get a boundary of a field",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "Bearer {{leaf_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://{{leaf_api_url}}/services/fields/api/users/{{leaf_user_id}}/fields/{{field_id}}/boundaries/{{boundary_id}}",
											"protocol": "https",
											"host": [
												"{{leaf_api_url}}"
											],
											"path": [
												"services",
												"fields",
												"api",
												"users",
												"{{leaf_user_id}}",
												"fields",
												"{{field_id}}",
												"boundaries",
												"{{boundary_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get active boundary of a field",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{leaf_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://{{leaf_api_url}}/services/fields/api/users/{{leaf_user_id}}/fields/{{field_id}}/boundary",
											"protocol": "https",
											"host": [
												"{{leaf_api_url}}"
											],
											"path": [
												"services",
												"fields",
												"api",
												"users",
												"{{leaf_user_id}}",
												"fields",
												"{{field_id}}",
												"boundary"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update active boundary",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{leaf_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"geometry\": {\n    \"coordinates\": \n    [[[\n        [-89.84392762184143,39.72439389620628],\n        [-89.84388470649719,39.71943436012731],\n        [-89.83928203582764,39.71951688444436],\n        [-89.83936786651611,39.725392361998416],\n        [-89.84392762184143,39.72439389620628]\n    ]]],\n    \"type\": \"MultiPolygon\"\n  }\n}"
										},
										"url": {
											"raw": "https://{{leaf_api_url}}/services/fields/api/users/{{leaf_user_id}}/fields/{{field_id}}/boundary",
											"protocol": "https",
											"host": [
												"{{leaf_api_url}}"
											],
											"path": [
												"services",
												"fields",
												"api",
												"users",
												"{{leaf_user_id}}",
												"fields",
												"{{field_id}}",
												"boundary"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Farms",
							"item": [
								{
									"name": "Get all farms",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{leaf_token}}"
											}
										],
										"url": {
											"raw": "https://{{leaf_api_url}}/services/fields/api/farms",
											"protocol": "https",
											"host": [
												"{{leaf_api_url}}"
											],
											"path": [
												"services",
												"fields",
												"api",
												"farms"
											],
											"query": [
												{
													"key": "leafUserId",
													"value": "{{leaf_user_id}}",
													"description": "your Leaf User id",
													"disabled": true
												},
												{
													"key": "growerId",
													"value": "",
													"description": "only matches Farms from this growerId (integer)",
													"disabled": true
												},
												{
													"key": "provider",
													"value": "",
													"description": "only matches Farms from this provider (string)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "0",
													"description": "Pagination parameter for selecting the page of the result (integer)",
													"disabled": true
												},
												{
													"key": "size",
													"value": "30",
													"description": "Pagination parameter that specifies the size of each page (integer)",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get a farm",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{leaf_token}}"
											}
										],
										"url": {
											"raw": "https://{{leaf_api_url}}/services/fields/api/users/{{leaf_user_id}}/farms/{{farm_id}}",
											"protocol": "https",
											"host": [
												"{{leaf_api_url}}"
											],
											"path": [
												"services",
												"fields",
												"api",
												"users",
												"{{leaf_user_id}}",
												"farms",
												"{{farm_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a farm",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{leaf_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"Farm 01\",\n  \"growerId\": 123\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{leaf_api_url}}/services/fields/api/users/{{leaf_user_id}}/farms",
											"protocol": "https",
											"host": [
												"{{leaf_api_url}}"
											],
											"path": [
												"services",
												"fields",
												"api",
												"users",
												"{{leaf_user_id}}",
												"farms"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update a farm",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{leaf_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"Farm 01\",\n  \"growerId\": 123\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{leaf_api_url}}/services/fields/api/users/{{leaf_user_id}}/farms/{{farm_id}}",
											"protocol": "https",
											"host": [
												"{{leaf_api_url}}"
											],
											"path": [
												"services",
												"fields",
												"api",
												"users",
												"{{leaf_user_id}}",
												"farms",
												"{{farm_id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Growers",
							"item": [
								{
									"name": "Get all growers",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{leaf_token}}"
											}
										],
										"url": {
											"raw": "https://{{leaf_api_url}}/services/fields/api/growers",
											"protocol": "https",
											"host": [
												"{{leaf_api_url}}"
											],
											"path": [
												"services",
												"fields",
												"api",
												"growers"
											],
											"query": [
												{
													"key": "leafUserId",
													"value": "{{leaf_user_id}}",
													"description": "your Leaf User id",
													"disabled": true
												},
												{
													"key": "page",
													"value": "0",
													"description": "Pagination parameter for selecting the page of the result (integer)",
													"disabled": true
												},
												{
													"key": "size",
													"value": "30",
													"description": "Pagination parameter that specifies the size of each page (integer)",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get a grower",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{leaf_token}}"
											}
										],
										"url": {
											"raw": "https://{{leaf_api_url}}/services/fields/api/growers/{{grower_id}}",
											"protocol": "https",
											"host": [
												"{{leaf_api_url}}"
											],
											"path": [
												"services",
												"fields",
												"api",
												"growers",
												"{{grower_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a grower",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{leaf_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"Example Grower Name\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{leaf_api_url}}/services/fields/api/users/{{leaf_user_id}}/growers",
											"protocol": "https",
											"host": [
												"{{leaf_api_url}}"
											],
											"path": [
												"services",
												"fields",
												"api",
												"users",
												"{{leaf_user_id}}",
												"growers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update a grower",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{leaf_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"Example Grower Name\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{leaf_api_url}}/services/fields/api/users/{{leaf_user_id}}/growers/{{grower_id}}",
											"protocol": "https",
											"host": [
												"{{leaf_api_url}}"
											],
											"path": [
												"services",
												"fields",
												"api",
												"users",
												"{{leaf_user_id}}",
												"growers",
												"{{grower_id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Files",
							"item": [
								{
									"name": "Get an operation of a field",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{leaf_token}}"
											}
										],
										"url": {
											"raw": "https://{{leaf_api_url}}/services/fields/api/users/{{leaf_user_id}}/fields/{{field_id}}/operations/{{file_id}}",
											"protocol": "https",
											"host": [
												"{{leaf_api_url}}"
											],
											"path": [
												"services",
												"fields",
												"api",
												"users",
												"{{leaf_user_id}}",
												"fields",
												"{{field_id}}",
												"operations",
												"{{file_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all operations of a field",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{leaf_token}}"
											}
										],
										"url": {
											"raw": "https://{{leaf_api_url}}/services/fields/api/users/{{leaf_user_id}}/fields/{{field_id}}/operations",
											"protocol": "https",
											"host": [
												"{{leaf_api_url}}"
											],
											"path": [
												"services",
												"fields",
												"api",
												"users",
												"{{leaf_user_id}}",
												"fields",
												"{{field_id}}",
												"operations"
											],
											"query": [
												{
													"key": "origin",
													"value": "provider",
													"description": "provider, merged or automerged",
													"disabled": true
												},
												{
													"key": "operationType",
													"value": "harvested",
													"description": "Supported values: applied, harvested, planted, other",
													"disabled": true
												},
												{
													"key": "operationCrop",
													"value": "",
													"description": "crop code/number of the operation. Requires `operationProvider`",
													"disabled": true
												},
												{
													"key": "operationProvider",
													"value": "JohnDeere",
													"description": "The name of the company provider of the operations. Supported values: ClimateFieldView, CNHI, JohnDeere, Trimble",
													"disabled": true
												},
												{
													"key": "operationStartTime",
													"value": "2018-10-22T20:25Z",
													"description": "ISO 8601 date-time instant that filters operations that started at it or after it (must be in the past or present)",
													"disabled": true
												},
												{
													"key": "operationEndTime",
													"value": "2018-10-22T20:25Z",
													"description": "ISO 8601 date-time instant that filters operations that ended at it or before it (must be in the past or present)",
													"disabled": true
												},
												{
													"key": "organizationId",
													"value": "",
													"description": "Grower's organization id from the provider (string)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "0",
													"description": "Pagination parameter for selecting the page of the result (integer)",
													"disabled": true
												},
												{
													"key": "size",
													"value": "30",
													"description": "Pagination parameter that specifies the size of each page (integer)",
													"disabled": true
												},
												{
													"key": "sort",
													"value": "asc",
													"description": "Sorting order of the results. Can be multivalue, the former takes precedence over the later. Can also specify order as `asc` or `desc` with `asc` being the default. Example: id,desc",
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"description": "Query Operations by Field\nTo query all operations that happened in a specific field (step 2), we first need to create that field (step 1). Then, Leaf will automatically detect operations of that field based on the operations' and on the field's coordinates. This process usually takes about 30 minutes.\n1. Create Field\nHere we need to specify a leafUserId (that will be the Leaf User owner of that field), a externalId (that will be the name we give to the field) and the geojson geometry of the field (location). After creating the field we can query it (step 2) \n2. Get operations' ids by Field\nTo query all operations that happened in a specific field, just update the environment variable \"field_external_id\" to the field id you want to query files\n",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Machine File Conversion",
					"item": [
						{
							"name": "Get all files",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}"
									}
								],
								"url": {
									"raw": "https://{{leaf_api_url}}/services/operations/api/files",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"operations",
										"api",
										"files"
									],
									"query": [
										{
											"key": "leafUserId",
											"value": "{{leaf_user_id}}",
											"description": "filter by leaf_user",
											"disabled": true
										},
										{
											"key": "provider",
											"value": "Leaf",
											"description": "JohnDeere, ClimateFieldView, Leaf, CNHi, AgLeader or Trimble",
											"disabled": true
										},
										{
											"key": "origin",
											"value": "automerged",
											"description": "provider, uploaded, merged or automerged",
											"disabled": true
										},
										{
											"key": "status",
											"value": "processed",
											"description": "processed, processing or failed",
											"disabled": true
										},
										{
											"key": "createdTime",
											"value": "2019-10-22T20:25",
											"description": "(iso 8601 date-time) get files that were processed by Leaf after \"createdTime\"",
											"disabled": true
										},
										{
											"key": "startTime",
											"value": "2018-10-22T20:25Z",
											"description": "ISO 8601 date. Returns operations from the startTime onward",
											"disabled": true
										},
										{
											"key": "endTime",
											"value": "2019-10-22T20:25Z",
											"description": "ISO 8601 date. Returns operations that ended before endTime",
											"disabled": true
										},
										{
											"key": "operationType",
											"value": "harvested",
											"description": "planted, applied, harvested or tillage",
											"disabled": true
										},
										{
											"key": "minArea",
											"value": "50000.00",
											"description": "minimum area of the operation in square meters",
											"disabled": true
										},
										{
											"key": "organizationId",
											"value": "123456",
											"description": "the provider organizationId (only available for John Deere)",
											"disabled": true
										},
										{
											"key": "size",
											"value": "20",
											"description": "Pagination parameter that specifies the size of each page (integer)",
											"disabled": true
										},
										{
											"key": "page",
											"value": "1",
											"description": "Pagination parameter for selecting the page of the result (integer)",
											"disabled": true
										},
										{
											"key": "batchId",
											"value": "UUID",
											"description": "UUID of the upload response (only available for uploaded files)",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get specific file by id",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}"
									}
								],
								"url": {
									"raw": "https://{{leaf_api_url}}/services/operations/api/files/{{file_id}}",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"operations",
										"api",
										"files",
										"{{file_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get file images",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}"
									}
								],
								"url": {
									"raw": "https://{{leaf_api_url}}/services/operations/api/files/{{file_id}}/images",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"operations",
										"api",
										"files",
										"{{file_id}}",
										"images"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get file summary",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}"
									}
								],
								"url": {
									"raw": "https://{{leaf_api_url}}/services/operations/api/files/{{file_id}}/summary",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"operations",
										"api",
										"files",
										"{{file_id}}",
										"summary"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get file units",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}"
									}
								],
								"url": {
									"raw": "https://{{leaf_api_url}}/services/operations/api/files/{{file_id}}/units",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"operations",
										"api",
										"files",
										"{{file_id}}",
										"units"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get file status",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}"
									}
								],
								"url": {
									"raw": "https://{{leaf_api_url}}/services/operations/api/files/{{file_id}}/status",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"operations",
										"api",
										"files",
										"{{file_id}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all uncovered files",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}"
									}
								],
								"url": {
									"raw": "https://{{leaf_api_url}}/services/operations/api/files/uncoveredFiles?leafUserId={{leaf_user_id}}",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"operations",
										"api",
										"files",
										"uncoveredFiles"
									],
									"query": [
										{
											"key": "leafUserId",
											"value": "{{leaf_user_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload operation file",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"description": "select your file",
											"type": "file",
											"src": "/Users/gmbueno/Desktop/LEAF/FARLOGS_FILES_MEGATEST/Climate.zip"
										}
									]
								},
								"url": {
									"raw": "https://{{leaf_api_url}}/services/operations/api/batch?leafUserId={{leaf_user_id}}&provider=Other",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"operations",
										"api",
										"batch"
									],
									"query": [
										{
											"key": "leafUserId",
											"value": "{{leaf_user_id}}"
										},
										{
											"key": "provider",
											"value": "Other"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get batch by id",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}"
									}
								],
								"url": {
									"raw": "https://{{leaf_api_url}}/services/operations/api/batch/{{batch_id}}",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"operations",
										"api",
										"batch",
										"{{batch_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all batches",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}"
									}
								],
								"url": {
									"raw": "https://{{leaf_api_url}}/services/operations/api/batch",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"operations",
										"api",
										"batch"
									]
								}
							},
							"response": []
						},
						{
							"name": "Merge operation files",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"pm.environment.set(\"merged_file_id\", jsonData.id);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"ids\": [\n    \"{{operation_1_id}}\",\n    \"{{operation_2_id}}\"\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{leaf_api_url}}/services/operations/api/files/merge",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"operations",
										"api",
										"files",
										"merge"
									]
								},
								"description": "Make sure you are merging operations of the \n- same operationType (PLANTED, HARVESTED or APPLIED)\n- same Leaf User"
							},
							"response": []
						}
					],
					"description": "Get Operation Files\n1. Query & access all files\nWith this endpoint you can query all files of all your users (or you can filter by user as well, or by provider, by operation_date and much more). Select and update which params (filters) you want to apply before querying files and just hit \"send\"\n2. Query & access specific file\nTo query for a specific operation file, you just have to update the value of the environment variable \"file_id\" and hit \"send\"\n",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Field Operations",
					"item": [
						{
							"name": "Get all operations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}"
									}
								],
								"url": {
									"raw": "https://{{leaf_api_url}}/services/operations/api/operations",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"operations",
										"api",
										"operations"
									],
									"query": [
										{
											"key": "leafUserId",
											"value": "{{leaf_user_id}}",
											"description": "filter by leaf_user",
											"disabled": true
										},
										{
											"key": "provider",
											"value": "Leaf",
											"description": "CNHI, JohnDeere, Trimble, ClimateFieldView, AgLeader, Stara or Leaf",
											"disabled": true
										},
										{
											"key": "fieldId",
											"value": "{{field_id}}",
											"description": "the field where the operation happened",
											"disabled": true
										},
										{
											"key": "updatedTime",
											"value": "2019-10-22T20:25",
											"description": "ISO 8601 date. Returns operations from the updatedTime onward",
											"disabled": true
										},
										{
											"key": "startTime",
											"value": "2018-10-22T20:25Z",
											"description": "ISO 8601 date. Returns operations from the startTime onward",
											"disabled": true
										},
										{
											"key": "endTime",
											"value": "2019-10-22T20:25Z",
											"description": "ISO 8601 date. Returns operations that ended before endTime",
											"disabled": true
										},
										{
											"key": "operationType",
											"value": "harvested",
											"description": "planted, applied, harvested or tillage",
											"disabled": true
										},
										{
											"key": "size",
											"value": "20",
											"description": "Pagination parameter that specifies the size of each page (integer)",
											"disabled": true
										},
										{
											"key": "page",
											"value": "1",
											"description": "Pagination parameter for selecting the page of the result (integer)",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get an operation",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}"
									}
								],
								"url": {
									"raw": "https://{{leaf_api_url}}/services/operations/api/operations/{{operation_id}}",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"operations",
										"api",
										"operations",
										"{{operation_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get an operation summary",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}"
									}
								],
								"url": {
									"raw": "https://{{leaf_api_url}}/services/operations/api/operations/{{operation_id}}/summary",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"operations",
										"api",
										"operations",
										"{{operation_id}}",
										"summary"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get an operation filteredGeojson",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}"
									}
								],
								"url": {
									"raw": "https://{{leaf_api_url}}/services/operations/api/operations/{{operation_id}}/filteredGeojson",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"operations",
										"api",
										"operations",
										"{{operation_id}}",
										"filteredGeojson"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get an operation standardGeojson",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}"
									}
								],
								"url": {
									"raw": "https://{{leaf_api_url}}/services/operations/api/operations/{{operation_id}}/standardGeojson",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"operations",
										"api",
										"operations",
										"{{operation_id}}",
										"standardGeojson"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get an operation's images",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}"
									}
								],
								"url": {
									"raw": "https://{{leaf_api_url}}/services/operations/api/operations/{{operation_id}}/images",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"operations",
										"api",
										"operations",
										"{{operation_id}}",
										"images"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get an operation's images v2",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}"
									}
								],
								"url": {
									"raw": "https://{{leaf_api_url}}/services/operations/api/operations/{{operation_id}}/imagesV2",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"operations",
										"api",
										"operations",
										"{{operation_id}}",
										"imagesV2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get an operation's geotiff images",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}"
									}
								],
								"url": {
									"raw": "https://{{leaf_api_url}}/services/operations/api/operations/{{operation_id}}/geotiffImages",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"operations",
										"api",
										"operations",
										"{{operation_id}}",
										"geotiffImages"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get an operation's units",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}"
									}
								],
								"url": {
									"raw": "https://{{leaf_api_url}}/services/operations/api/operations/{{file_id}}/units",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"operations",
										"api",
										"operations",
										"{{file_id}}",
										"units"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reprocess an operation",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{leaf_api_url}}/services/operations/api/operations/{{operation_id}}/reprocess",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"operations",
										"api",
										"operations",
										"{{operation_id}}",
										"reprocess"
									]
								}
							},
							"response": []
						},
						{
							"name": "Crop operation by field",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"operationId\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{leaf_api_url}}/services/operations/api/operations/CropOperationByField",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"operations",
										"api",
										"operations",
										"CropOperationByField"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Crop Monitoring",
					"item": [
						{
							"name": "Get all satellite fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}"
									}
								],
								"url": {
									"raw": "https://{{leaf_api_url}}/services/satellite/api/fields",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"satellite",
										"api",
										"fields"
									],
									"query": [
										{
											"key": "page",
											"value": "0",
											"disabled": true
										},
										{
											"key": "size",
											"value": "100",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "providers,asc",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a satellite field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}"
									}
								],
								"url": {
									"raw": "https://{{leaf_api_url}}/services/satellite/api/fields/{{sat_external_id}}",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"satellite",
										"api",
										"fields",
										"{{sat_external_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get images of satellite field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}"
									}
								],
								"url": {
									"raw": "https://{{leaf_api_url}}/services/satellite/api/fields/{{sat_external_id}}/processes",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"satellite",
										"api",
										"fields",
										"{{sat_external_id}}",
										"processes"
									],
									"query": [
										{
											"key": "endDate",
											"value": null,
											"disabled": true
										},
										{
											"key": "endProcessedTimestamp",
											"value": null,
											"disabled": true
										},
										{
											"key": "maxClouds",
											"value": "100",
											"disabled": true
										},
										{
											"key": "minCoverage",
											"value": "0.0",
											"disabled": true
										},
										{
											"key": "status",
											"value": "SUCCESS",
											"disabled": true
										},
										{
											"key": "page",
											"value": "0",
											"disabled": true
										},
										{
											"key": "provider",
											"value": "sentinel",
											"disabled": true
										},
										{
											"key": "size",
											"value": "20",
											"disabled": true
										},
										{
											"key": "sort",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get an image of satellite field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}"
									}
								],
								"url": {
									"raw": "https://{{leaf_api_url}}/services/satellite/api/fields/{{sat_external_id}}/processes/{{process_id}}",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"satellite",
										"api",
										"fields",
										"{{sat_external_id}}",
										"processes",
										"{{process_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get subscription for Planet",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}"
									}
								],
								"url": {
									"raw": "https://{{leaf_api_url}}/services/satellite/api/fields/{{sat_external_id}}/subscription",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"satellite",
										"api",
										"fields",
										"{{sat_external_id}}",
										"subscription"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a satellite field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"assetTypes\": [\n    \"ortho_analytic_8b_sr\"\n  ],\n  \"externalId\": \"{{sat_external_id}}\",\n  \"daysBefore\": 30,\n  \"geometry\": {\n    \"type\": \"MultiPolygon\",\n    \"coordinates\": [\n      [\n        [\n          [\n            -48.95275447,\n            -22.49608\n          ],\n          [\n            -48.95379286,\n            -22.49675703\n          ],\n          [\n            -48.9591836,\n            -22.50310243\n          ],\n          [\n            -48.96225525,\n            -22.5067235\n          ],\n          [\n            -48.94852019,\n            -22.50648371\n          ],\n          [\n            -48.94780839,\n            -22.49693998\n          ],\n          [\n            -48.95275447,\n            -22.49608\n          ]\n        ]\n      ]\n    ]\n  },\n  \"providers\": [\n    \"planet\"\n  ]\n}"
								},
								"url": {
									"raw": "https://{{leaf_api_url}}/services/satellite/api/fields",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"satellite",
										"api",
										"fields"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reprocess satellite images",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}"
									}
								],
								"url": {
									"raw": "https://{{leaf_api_url}}/services/satellite/api/fields/{{sat_external_id}}/processes/{{process_id}}/reprocess",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"satellite",
										"api",
										"fields",
										"{{sat_external_id}}",
										"processes",
										"{{process_id}}",
										"reprocess"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a satellite field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{leaf_api_url}}/services/satellite/api/fields/{{sat_external_id}}",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"satellite",
										"api",
										"fields",
										"{{sat_external_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Beta",
					"item": [
						{
							"name": "Input Database",
							"item": [
								{
									"name": "Products",
									"item": [
										{
											"name": "Get all products",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/beta/api/products",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"beta",
														"api",
														"products"
													],
													"query": [
														{
															"key": "leafUserId",
															"value": "{{leaf_user_id}}",
															"disabled": true
														},
														{
															"key": "provider",
															"value": "JohnDeere",
															"disabled": true
														},
														{
															"key": "size",
															"value": "100",
															"description": "Pagination parameter that specifies the size of each page (integer), default is 20, maximum is 100",
															"disabled": true
														},
														{
															"key": "page",
															"value": "1",
															"description": "Pagination parameter for selecting the page (integer)",
															"disabled": true
														},
														{
															"key": "sort",
															"value": "",
															"description": "Sorting order of the results. Can be multivalue, the former takes precedence over the later. Can also specify order as `asc` or `desc` with `asc` being the default. Example: id,desc",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get summarized products",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/beta/api/users/{{leaf_user_id}}/products/summary",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"beta",
														"api",
														"users",
														"{{leaf_user_id}}",
														"products",
														"summary"
													],
													"query": [
														{
															"key": "name",
															"value": "",
															"description": "part of the product name",
															"disabled": true
														},
														{
															"key": "size",
															"value": "100",
															"description": "Pagination parameter that specifies the size of each page (integer), default is 20, maximum is 100",
															"disabled": true
														},
														{
															"key": "page",
															"value": "1",
															"description": "Pagination parameter for selecting the page (integer)",
															"disabled": true
														},
														{
															"key": "sort",
															"value": "",
															"description": "Sorting order of the results. Can be multivalue, the former takes precedence over the later. Can also specify order as `asc` or `desc` with `asc` being the default. Example: id,desc",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Search for products",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/beta/api/products/search",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"beta",
														"api",
														"products",
														"search"
													],
													"query": [
														{
															"key": "name",
															"value": "",
															"description": "part of the product name to be searched (required)",
															"disabled": true
														},
														{
															"key": "maxResults",
															"value": "",
															"description": "the number of results that should be returned (max value is 20). The default is 10",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get a product",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/beta/api/products/{product_id}",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"beta",
														"api",
														"products",
														"{product_id}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get matching products from an operation",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/beta/api/products/matching/operations/{{operation_id}}",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"beta",
														"api",
														"products",
														"matching",
														"operations",
														"{{operation_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updated product matches",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"status\": \"VALIDATED\"\n}"
												},
												"url": {
													"raw": "https://{{leaf_api_url}}/services/beta/api/products/matching/operations/{{operation_id}}/matches/{{match_id}}",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"beta",
														"api",
														"products",
														"matching",
														"operations",
														"{{operation_id}}",
														"matches",
														"{{match_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get product matches historical",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/beta/api/products/matching/operations/{{operation_id}}/matches/{{match_id}}/historical",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"beta",
														"api",
														"products",
														"matching",
														"operations",
														"{{operation_id}}",
														"matches",
														"{{match_id}}",
														"historical"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Varieties",
									"item": [
										{
											"name": "Get all varieties",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/beta/api/varieties",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"beta",
														"api",
														"varieties"
													],
													"query": [
														{
															"key": "leafUserId",
															"value": "{{leaf_user_id}}",
															"disabled": true
														},
														{
															"key": "provider",
															"value": "JohnDeere",
															"disabled": true
														},
														{
															"key": "size",
															"value": "100",
															"description": "Pagination parameter that specifies the size of each page (integer), default is 20, maximum is 100",
															"disabled": true
														},
														{
															"key": "page",
															"value": "1",
															"description": "Pagination parameter for selecting the page (integer)",
															"disabled": true
														},
														{
															"key": "sort",
															"value": "",
															"description": "Sorting order of the results. Can be multivalue, the former takes precedence over the later. Can also specify order as `asc` or `desc` with `asc` being the default. Example: id,desc",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get summarized varieties",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/beta/api/users/{{leaf_user_id}}/varieties/summary",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"beta",
														"api",
														"users",
														"{{leaf_user_id}}",
														"varieties",
														"summary"
													],
													"query": [
														{
															"key": "name",
															"value": "",
															"description": "part of the variety name",
															"disabled": true
														},
														{
															"key": "size",
															"value": "100",
															"description": "Pagination parameter that specifies the size of each page (integer), default is 20, maximum is 100",
															"disabled": true
														},
														{
															"key": "page",
															"value": "1",
															"description": "Pagination parameter for selecting the page (integer)",
															"disabled": true
														},
														{
															"key": "sort",
															"value": "",
															"description": "Sorting order of the results. Can be multivalue, the former takes precedence over the later. Can also specify order as `asc` or `desc` with `asc` being the default. Example: id,desc",
															"disabled": true
														},
														{
															"key": "crops",
															"value": "",
															"description": "desired crop name",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Search for varieties",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/beta/api/products/search",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"beta",
														"api",
														"products",
														"search"
													],
													"query": [
														{
															"key": "name",
															"value": "",
															"description": "part of the variety name to be searched (required)",
															"disabled": true
														},
														{
															"key": "maxResults",
															"value": "20",
															"description": "the number of results that should be returned (max value is 20). The default is 10",
															"disabled": true
														},
														{
															"key": "crop",
															"value": null,
															"description": "the name of the crop of the varieties of interest",
															"disabled": true
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Tank Mixes",
									"item": [
										{
											"name": "Get all tank mixes",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/beta/api/tankMixes",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"beta",
														"api",
														"tankMixes"
													],
													"query": [
														{
															"key": "leafUserId",
															"value": "{{leaf_user_id}}",
															"disabled": true
														},
														{
															"key": "provider",
															"value": "JohnDeere",
															"disabled": true
														},
														{
															"key": "size",
															"value": "100",
															"description": "Pagination parameter that specifies the size of each page (integer), default is 20, maximum is 100",
															"disabled": true
														},
														{
															"key": "page",
															"value": "1",
															"description": "Pagination parameter for selecting the page (integer)",
															"disabled": true
														},
														{
															"key": "sort",
															"value": "",
															"description": "Sorting order of the results. Can be multivalue, the former takes precedence over the later. Can also specify order as `asc` or `desc` with `asc` being the default. Example: id,desc",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Search for tank mixes",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/beta/api/tankMixes/search",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"beta",
														"api",
														"tankMixes",
														"search"
													],
													"query": [
														{
															"key": "name",
															"value": "",
															"description": "part of the tank mix name to be searched (required)",
															"disabled": true
														},
														{
															"key": "maxResults",
															"value": "",
															"description": "the number of results that should be returned (max value is 20). The default is 10",
															"disabled": true
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Machines",
							"item": [
								{
									"name": "Get all Machines",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{leaf_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "https://{{leaf_api_url}}/services/beta/api/users/{{leaf_user_id}}/machines",
											"protocol": "https",
											"host": [
												"{{leaf_api_url}}"
											],
											"path": [
												"services",
												"beta",
												"api",
												"users",
												"{{leaf_user_id}}",
												"machines"
											],
											"query": [
												{
													"key": "page",
													"value": "0",
													"description": "Pagination parameter for selecting the page (integer)",
													"disabled": true
												},
												{
													"key": "size",
													"value": "20",
													"description": "Pagination parameter that specifies the size of each page (integer), default is 20, maximum is 100",
													"disabled": true
												},
												{
													"key": "sort",
													"value": "",
													"description": "Sorting order of the results. Can be multivalue, the former takes precedence over the later. Can also specify order as `asc` or `desc` with `asc` being the default. Example: id,desc",
													"disabled": true
												},
												{
													"key": "name",
													"value": "Case IH  7120",
													"description": "Text",
													"disabled": true
												},
												{
													"key": "provider",
													"value": "CNHI",
													"description": "JohnDeere, CNHI, Stara",
													"disabled": true
												},
												{
													"key": "providerOrganizationId",
													"value": "1722",
													"description": "Text",
													"disabled": true
												},
												{
													"key": "serialNumber",
													"value": "8205186",
													"description": "Text",
													"disabled": true
												},
												{
													"key": "originType",
													"value": "FILE_POOLED",
													"description": "Specify the origin of the machine, must be either USER_CREATED, FILE_POOLED or PROVIDER_POOLED",
													"disabled": true
												},
												{
													"key": "createdTime",
													"value": "2022-01-10T21:28:58.764Z",
													"description": "Must match exactly the time of the record creation, ISO 8601 without timezone",
													"disabled": true
												},
												{
													"key": "beforeCreatedTime",
													"value": "2022-01-20T21:28:58.764Z",
													"description": "Filters for records created before the datetime, ISO 8601 without timezone",
													"disabled": true
												},
												{
													"key": "afterCreatedTime",
													"value": "2022-01-01T21:28:58.764Z",
													"description": "Filters for records created after the datetime, ISO 8601 without timezone",
													"disabled": true
												},
												{
													"key": "vin",
													"value": "1RW7280RVCD123456",
													"description": "Vehicle Identification Number",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get specific Machine",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{leaf_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "https://{{leaf_api_url}}/services/beta/api/users/{{leaf_user_id}}/machines/{{machine_id}}",
											"protocol": "https",
											"host": [
												"{{leaf_api_url}}"
											],
											"path": [
												"services",
												"beta",
												"api",
												"users",
												"{{leaf_user_id}}",
												"machines",
												"{{machine_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Machine",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"machine_id\", jsonData.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{leaf_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"string\"\n}"
										},
										"url": {
											"raw": "https://{{leaf_api_url}}/services/beta/api/users/{{leaf_user_id}}/machines",
											"protocol": "https",
											"host": [
												"{{leaf_api_url}}"
											],
											"path": [
												"services",
												"beta",
												"api",
												"users",
												"{{leaf_user_id}}",
												"machines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Machine",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{leaf_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"string\"\n}"
										},
										"url": {
											"raw": "https://{{leaf_api_url}}/services/beta/api/users/{{leaf_user_id}}/machines/{{machine_id}}",
											"protocol": "https",
											"host": [
												"{{leaf_api_url}}"
											],
											"path": [
												"services",
												"beta",
												"api",
												"users",
												"{{leaf_user_id}}",
												"machines",
												"{{machine_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Machine",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{leaf_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "https://{{leaf_api_url}}/services/beta/api/users/{{leaf_user_id}}/machines/{{machine_id}}",
											"protocol": "https",
											"host": [
												"{{leaf_api_url}}"
											],
											"path": [
												"services",
												"beta",
												"api",
												"users",
												"{{leaf_user_id}}",
												"machines",
												"{{machine_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all Machine Files",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{leaf_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "https://{{leaf_api_url}}/services/beta/api/users/{{leaf_user_id}}/machines/{{machine_id}}/files",
											"protocol": "https",
											"host": [
												"{{leaf_api_url}}"
											],
											"path": [
												"services",
												"beta",
												"api",
												"users",
												"{{leaf_user_id}}",
												"machines",
												"{{machine_id}}",
												"files"
											],
											"query": [
												{
													"key": "page",
													"value": "0",
													"description": "Pagination parameter for selecting the page (integer)",
													"disabled": true
												},
												{
													"key": "size",
													"value": "20",
													"description": "Pagination parameter that specifies the size of each page (integer), default is 20, maximum is 100",
													"disabled": true
												},
												{
													"key": "sort",
													"value": "id,machineId,leafUserId,startTime,endTime,createdTime,leaFileId,asc|desc",
													"description": "Sorting order of the results. Can be multivalue, the former takes precedence over the later. Can also specify order as `asc` or `desc` with `asc` being the default. Example: id,desc",
													"disabled": true
												},
												{
													"key": "leafFileId",
													"value": "99999999-9999-9999-9999-999999999999",
													"description": "UUID",
													"disabled": true
												},
												{
													"key": "startTime",
													"value": "2017-04-19T19:03:11Z",
													"description": "Must match exactly the time of the start of the operation, ISO 8601 without timezone",
													"disabled": true
												},
												{
													"key": "endTime",
													"value": "2017-04-19T19:03:34Z",
													"description": "Must match exactly the time of the end of the operation, ISO 8601 without timezone",
													"disabled": true
												},
												{
													"key": "originType",
													"value": "FILE_POOLED",
													"description": "Filter by the origin of the machine file, must be either USER_CREATED, FILE_POOLED or PROVIDER_POOLED",
													"disabled": true
												},
												{
													"key": "createdTime",
													"value": "2022-01-14T19:37:10.534Z",
													"description": "Must match exactly the time of the record creation, ISO 8601 without timezone",
													"disabled": true
												},
												{
													"key": "beforeCreatedTime",
													"value": "2022-01-20T19:37:10.534Z",
													"description": "Filters for records created before the datetime, ISO 8601 without timezone",
													"disabled": true
												},
												{
													"key": "afterCreatedTime",
													"value": "2022-01-10T19:37:10.534Z",
													"description": "Filters for records created after the datetime, ISO 8601 without timezone",
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Layers",
							"item": [
								{
									"name": "Get all layers",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{leaf_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "https://{{leaf_api_url}}/services/beta/api/users/{{leaf_user_id}}/layers",
											"protocol": "https",
											"host": [
												"{{leaf_api_url}}"
											],
											"path": [
												"services",
												"beta",
												"api",
												"users",
												"{{leaf_user_id}}",
												"layers"
											],
											"query": [
												{
													"key": "type",
													"value": null,
													"description": "TASSEL_COUNT, STAND_COUNT, NDVI or RGB",
													"disabled": true
												},
												{
													"key": "page",
													"value": "1",
													"description": "Pagination parameter for selecting the page of the result (integer)",
													"disabled": true
												},
												{
													"key": "size",
													"value": "20",
													"description": "Pagination parameter that specifies the size of each page (integer)",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Upload a layer to Climate Field View",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{leaf_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": []
												}
											]
										},
										"url": {
											"raw": "https://{{leaf_api_url}}/services/beta/api/users/{{leaf_user_id}}/layers/climateFieldView?uploadType=RGB",
											"protocol": "https",
											"host": [
												"{{leaf_api_url}}"
											],
											"path": [
												"services",
												"beta",
												"api",
												"users",
												"{{leaf_user_id}}",
												"layers",
												"climateFieldView"
											],
											"query": [
												{
													"key": "uploadType",
													"value": "RGB",
													"description": "only true color image (RGB) files are supported"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Prescription",
							"item": [
								{
									"name": "RavenSlingshot",
									"item": [
										{
											"name": "Get RavenSlingshot prescription",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}"
													}
												],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/beta/prescription/api/users/{{leaf_user_id}}/ravenSlingshot",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"beta",
														"prescription",
														"api",
														"users",
														"{{leaf_user_id}}",
														"ravenSlingshot"
													]
												}
											},
											"response": []
										},
										{
											"name": "Upload RavenSlingshot prescription file",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"description": "Select your prescription file (zip file)",
															"type": "file",
															"src": []
														}
													]
												},
												"url": {
													"raw": "https://{{leaf_api_url}}/services/beta/prescription/api/users/{{leaf_user_id}}/ravenSlingshot",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"beta",
														"prescription",
														"api",
														"users",
														"{{leaf_user_id}}",
														"ravenSlingshot"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "ClimateFieldView",
									"item": [
										{
											"name": "Upload ClimateFieldView prescription file",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"description": "Select your prescription file (zip file)",
															"type": "file",
															"src": []
														}
													]
												},
												"url": {
													"raw": "https://{{leaf_api_url}}/services/beta/prescription/api/users/{{leaf_user_id}}/climateFieldView",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"beta",
														"prescription",
														"api",
														"users",
														"{{leaf_user_id}}",
														"climateFieldView"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "John Deere",
									"item": [
										{
											"name": "Upload John Deere prescription files",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"description": "Select your prescription file (zip file)",
															"type": "file",
															"src": []
														}
													]
												},
												"url": {
													"raw": "https://{{leaf_api_url}}/services/beta/prescription/api/users/{{leaf_user_id}}/johnDeere?organizationId={{jd_organization_id}}",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"beta",
														"prescription",
														"api",
														"users",
														"{{leaf_user_id}}",
														"johnDeere"
													],
													"query": [
														{
															"key": "organizationId",
															"value": "{{jd_organization_id}}",
															"description": "The id of the organization at JohnDeere"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get John Deere prescriptions",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}"
													}
												],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/beta/prescription/api/users/{{leaf_user_id}}/johnDeere?organizationId={{jd_organization_id}}",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"beta",
														"prescription",
														"api",
														"users",
														"{{leaf_user_id}}",
														"johnDeere"
													],
													"query": [
														{
															"key": "organizationId",
															"value": "{{jd_organization_id}}",
															"description": "The id of the organization at JohnDeere"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Download prescription from John Deere",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}"
													}
												],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/beta/prescription/api/users/{{leaf_user_id}}/johnDeere?organizationId={{jd_organization_id}}",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"beta",
														"prescription",
														"api",
														"users",
														"{{leaf_user_id}}",
														"johnDeere"
													],
													"query": [
														{
															"key": "organizationId",
															"value": "{{jd_organization_id}}",
															"description": "The id of the organization at JohnDeere"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "CNHi",
									"item": [
										{
											"name": "Get CNHi prescriptions",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}"
													}
												],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/beta/prescription/api/users/{{leaf_user_id}}/cnhi?companyId={{cnhi_company_id}}",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"beta",
														"prescription",
														"api",
														"users",
														"{{leaf_user_id}}",
														"cnhi"
													],
													"query": [
														{
															"key": "companyId",
															"value": "{{cnhi_company_id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Upload prescription to CNHi",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"type": "file",
															"src": []
														}
													]
												},
												"url": {
													"raw": "https://{{leaf_api_url}}/services/beta/prescription/api/users/{{leaf_user_id}}/cnhi?companyId={{cnhi_company_id}}",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"beta",
														"prescription",
														"api",
														"users",
														"{{leaf_user_id}}",
														"cnhi"
													],
													"query": [
														{
															"key": "companyId",
															"value": "{{cnhi_company_id}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Trimble",
									"item": [
										{
											"name": "Get CNHi prescriptions",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"type": "file",
															"src": []
														}
													]
												},
												"url": {
													"raw": "https://{{leaf_api_url}}/services/beta/prescription/api/users/{{leaf_user_id}}/trimble?organizationId=123456&rateColumn=columnRateName&rateUnits=gal/ac",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"beta",
														"prescription",
														"api",
														"users",
														"{{leaf_user_id}}",
														"trimble"
													],
													"query": [
														{
															"key": "organizationId",
															"value": "123456",
															"description": "fill with your organizationId"
														},
														{
															"key": "rateColumn",
															"value": "columnRateName",
															"description": "fill in the name of the rate column in the file"
														},
														{
															"key": "rateUnits",
															"value": "gal/ac",
															"description": "fill with the following values: gal/ac, l/ha, lbs/ac, ton/ac, kg/ha, t/ha, kS/ac, kS/ha, lbs(N)/ac, kg(N)/ha, S/ha or S/ha"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "AgLeader",
							"item": [
								{
									"name": "Upload AgLeader prescription file",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{leaf_token}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"description": "Select your prescription file (zip file)",
													"type": "file",
													"src": []
												}
											]
										},
										"url": {
											"raw": "https://{{leaf_api_url}}/services/beta/prescription/api/users/{{leaf_user_id}}/agLeader",
											"protocol": "https",
											"host": [
												"{{leaf_api_url}}"
											],
											"path": [
												"services",
												"beta",
												"prescription",
												"api",
												"users",
												"{{leaf_user_id}}",
												"agLeader"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Implements",
							"item": [
								{
									"name": "Get All Implements",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{leaf_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "https://{{leaf_api_url}}/services/beta/api/users/{{leaf_user_id}}/implements",
											"protocol": "https",
											"host": [
												"{{leaf_api_url}}"
											],
											"path": [
												"services",
												"beta",
												"api",
												"users",
												"{{leaf_user_id}}",
												"implements"
											],
											"query": [
												{
													"key": "page",
													"value": "0",
													"description": "Pagination parameter for selecting the page (integer)",
													"disabled": true
												},
												{
													"key": "size",
													"value": "20",
													"description": "Pagination parameter that specifies the size of each page (integer), default is 20, maximum is 100",
													"disabled": true
												},
												{
													"key": "sort",
													"value": "id,leafUserId,name,provider,providerOrganizationId,serialNumber,vin,model,make,category,asc|desc",
													"description": "Sorting order of the results. Can be multivalue, the former takes precedence over the later. Can also specify order as `asc` or `desc` with `asc` being the default. Example: id,desc",
													"disabled": true
												},
												{
													"key": "name",
													"value": "Case IH  7120",
													"description": "implement name",
													"disabled": true
												},
												{
													"key": "provider",
													"value": "JohnDeere",
													"description": "JohnDeere or Trimble",
													"disabled": true
												},
												{
													"key": "providerOrganizationId",
													"value": "1722",
													"description": "Text",
													"disabled": true
												},
												{
													"key": "createdTime",
													"value": "2022-01-10T21:28:58.764Z",
													"description": "Must match exactly the time of the record creation, ISO 8601 without timezone",
													"disabled": true
												},
												{
													"key": "providerImplementId",
													"value": "Implement1",
													"description": "provider implement id",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get An Implement",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{leaf_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "https://{{leaf_api_url}}/services/beta/api/users/{{leaf_user_id}}/implements/{{implement_id}}",
											"protocol": "https",
											"host": [
												"{{leaf_api_url}}"
											],
											"path": [
												"services",
												"beta",
												"api",
												"users",
												"{{leaf_user_id}}",
												"implements",
												"{{implement_id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Operators",
							"item": [
								{
									"name": "Get All Operators",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{leaf_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "https://{{leaf_api_url}}/services/beta/api/users/{{leaf_user_id}}/operators",
											"protocol": "https",
											"host": [
												"{{leaf_api_url}}"
											],
											"path": [
												"services",
												"beta",
												"api",
												"users",
												"{{leaf_user_id}}",
												"operators"
											],
											"query": [
												{
													"key": "page",
													"value": "0",
													"description": "Pagination parameter for selecting the page (integer)",
													"disabled": true
												},
												{
													"key": "size",
													"value": "20",
													"description": "Pagination parameter that specifies the size of each page (integer), default is 20, maximum is 100",
													"disabled": true
												},
												{
													"key": "provider",
													"value": "JohnDeere",
													"description": "JohnDeere",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get An Operator",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{leaf_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "https://{{leaf_api_url}}/services/beta/api/users/{{leaf_user_id}}/operators/{{operator_id}}",
											"protocol": "https",
											"host": [
												"{{leaf_api_url}}"
											],
											"path": [
												"services",
												"beta",
												"api",
												"users",
												"{{leaf_user_id}}",
												"operators",
												"{{operator_id}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Weather",
					"item": [
						{
							"name": "Get Daily Forecast",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{leaf_api_url}}/services/weather/api/users/{{leaf_user_id}}/weather/forecast/field/{{field_id}}/daily",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"weather",
										"api",
										"users",
										"{{leaf_user_id}}",
										"weather",
										"forecast",
										"field",
										"{{field_id}}",
										"daily"
									],
									"query": [
										{
											"key": "endTime",
											"value": "2023-04-20",
											"description": "ISO 8601 date. Returns operations that ended before endTime",
											"disabled": true
										},
										{
											"key": "startTime",
											"value": "2023-04-17",
											"description": "ISO 8601 date. Returns operations from the startTime onward",
											"disabled": true
										},
										{
											"key": "model",
											"value": "fill with the model",
											"description": "Fill with model: icon, gfs, arpegeArome, ifs, jma or gem. The default is gfs.",
											"disabled": true
										},
										{
											"key": "units",
											"value": "metric",
											"description": "Fill with system of units: imperial or metric. The default is metric",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Hourly Forecast",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{leaf_api_url}}/services/weather/api/users/{{leaf_user_id}}/weather/forecast/field/{{field_id}}/hourly",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"weather",
										"api",
										"users",
										"{{leaf_user_id}}",
										"weather",
										"forecast",
										"field",
										"{{field_id}}",
										"hourly"
									],
									"query": [
										{
											"key": "endTime",
											"value": "2023-04-20",
											"description": "ISO 8601 date. Returns operations that ended before endTime",
											"disabled": true
										},
										{
											"key": "startTime",
											"value": "2023-04-17",
											"description": "ISO 8601 date. Returns operations from the startTime onward",
											"disabled": true
										},
										{
											"key": "model",
											"value": "fill with the model",
											"description": "Fill with model: icon, gfs, arpegeArome, ifs, jma or gem. The default is gfs.",
											"disabled": true
										},
										{
											"key": "units",
											"value": "metric",
											"description": "Fill with system of units: imperial or metric. The default is metric",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Daily Forecast for lat/lon",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{leaf_api_url}}/services/weather/api/weather/forecast/daily/{{lat}},{{lon}}",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"weather",
										"api",
										"weather",
										"forecast",
										"daily",
										"{{lat}},{{lon}}"
									],
									"query": [
										{
											"key": "endTime",
											"value": "2023-04-20",
											"description": "ISO 8601 date. Returns operations that ended before endTime",
											"disabled": true
										},
										{
											"key": "startTime",
											"value": "2023-04-17",
											"description": "ISO 8601 date. Returns operations from the startTime onward",
											"disabled": true
										},
										{
											"key": "model",
											"value": "fill with the model",
											"description": "Fill with model: icon, gfs, arpegeArome, ifs, jma or gem. The default is gfs.",
											"disabled": true
										},
										{
											"key": "units",
											"value": "metric",
											"description": "Fill with system of units: imperial or metric. The default is metric",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Hourly Forecast for lat/lon",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{leaf_api_url}}/services/weather/api/weather/forecast/hourly/{{lat}},{{lon}}",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"weather",
										"api",
										"weather",
										"forecast",
										"hourly",
										"{{lat}},{{lon}}"
									],
									"query": [
										{
											"key": "endTime",
											"value": "2023-04-20",
											"description": "ISO 8601 date. Returns operations that ended before endTime",
											"disabled": true
										},
										{
											"key": "startTime",
											"value": "2023-04-17",
											"description": "ISO 8601 date. Returns operations from the startTime onward",
											"disabled": true
										},
										{
											"key": "model",
											"value": "fill with the model",
											"description": "Fill with model: icon, gfs, arpegeArome, ifs, jma or gem. The default is gfs.",
											"disabled": true
										},
										{
											"key": "units",
											"value": "metric",
											"description": "Fill with system of units: imperial or metric. The default is metric",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Daily Historical",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{leaf_api_url}}/services/weather/api/users/{{leaf_user_id}}/weather/historical/field/{{field_id}}/daily",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"weather",
										"api",
										"users",
										"{{leaf_user_id}}",
										"weather",
										"historical",
										"field",
										"{{field_id}}",
										"daily"
									],
									"query": [
										{
											"key": "endTime",
											"value": "2023-03-10",
											"description": "ISO 8601 date. Returns operations that ended before endTime",
											"disabled": true
										},
										{
											"key": "startTime",
											"value": "2023-02-10",
											"description": "ISO 8601 date. Returns operations from the startTime onward",
											"disabled": true
										},
										{
											"key": "model",
											"value": "fill with the model",
											"description": "Fill with model: era5 or era5Land. The default is era5",
											"disabled": true
										},
										{
											"key": "units",
											"value": "metric",
											"description": "Fill with system of units: imperial or metric. The default is metric",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Hourly Historical",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{leaf_api_url}}/services/weather/api/users/{{leaf_user_id}}/weather/historical/field/{{field_id}}/hourly",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"weather",
										"api",
										"users",
										"{{leaf_user_id}}",
										"weather",
										"historical",
										"field",
										"{{field_id}}",
										"hourly"
									],
									"query": [
										{
											"key": "endTime",
											"value": "2023-03-10",
											"description": "ISO 8601 date. Returns operations that ended before endTime",
											"disabled": true
										},
										{
											"key": "startTime",
											"value": "2023-02-10",
											"description": "ISO 8601 date. Returns operations from the startTime onward",
											"disabled": true
										},
										{
											"key": "model",
											"value": "fill with the model",
											"description": "Fill with model: era5 or era5Land. The default is era5",
											"disabled": true
										},
										{
											"key": "units",
											"value": "metric",
											"description": "Fill with system of units: imperial or metric. The default is metric",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Daily Historical for lat/lon",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{leaf_api_url}}/services/weather/api/weather/historical/daily/{{lat}},{{lon}}",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"weather",
										"api",
										"weather",
										"historical",
										"daily",
										"{{lat}},{{lon}}"
									],
									"query": [
										{
											"key": "endTime",
											"value": "2023-03-10",
											"description": "ISO 8601 date. Returns operations that ended before endTime",
											"disabled": true
										},
										{
											"key": "startTime",
											"value": "2023-02-10",
											"description": "ISO 8601 date. Returns operations from the startTime onward",
											"disabled": true
										},
										{
											"key": "model",
											"value": "fill with the model",
											"description": "Fill with model: era5 or era5Land. The default is era5",
											"disabled": true
										},
										{
											"key": "units",
											"value": "metric",
											"description": "Fill with system of units: imperial or metric. The default is metric",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Hourly Historical for lat/lon",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{leaf_api_url}}/services/weather/api/weather/historical/hourly/{{lat}},{{lon}}",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"weather",
										"api",
										"weather",
										"historical",
										"hourly",
										"{{lat}},{{lon}}"
									],
									"query": [
										{
											"key": "endTime",
											"value": "2023-03-10",
											"description": "ISO 8601 date. Returns operations that ended before endTime",
											"disabled": true
										},
										{
											"key": "startTime",
											"value": "2023-02-10",
											"description": "ISO 8601 date. Returns operations from the startTime onward",
											"disabled": true
										},
										{
											"key": "model",
											"value": "fill with the model",
											"description": "Fill with model: era5 or era5Land. The default is era5",
											"disabled": true
										},
										{
											"key": "units",
											"value": "metric",
											"description": "Fill with system of units: imperial or metric. The default is metric",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Irrigation",
					"item": [
						{
							"name": "Get as-applied irrigation",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{leaf_api_url}}/services/irrigation/api/users/{{leaf_user_id}}/irrigation/applied-irrigation",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"irrigation",
										"api",
										"users",
										"{{leaf_user_id}}",
										"irrigation",
										"applied-irrigation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all irrigated fields",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{leaf_api_url}}/services/irrigation/api/users/{{leaf_user_id}}/irrigation/fields",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"irrigation",
										"api",
										"users",
										"{{leaf_user_id}}",
										"irrigation",
										"fields"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all irrigation equipment",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{leaf_api_url}}/services/irrigation/api/users/{{leaf_user_id}}/irrigation-equipment/",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"irrigation",
										"api",
										"users",
										"{{leaf_user_id}}",
										"irrigation-equipment",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get an irrigated field",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{leaf_api_url}}/services/irrigation/api/users/{{leaf_user_id}}/irrigation/fields/{{field_id}}",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"irrigation",
										"api",
										"users",
										"{{leaf_user_id}}",
										"irrigation",
										"fields",
										"{{field_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Leaf Connect",
					"item": [
						{
							"name": "Get API Owner sharing relation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{leaf_api_url}}/services/usermanagement/api/api-owners/sharing-relation/{{sharing_relation_role}}",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"usermanagement",
										"api",
										"api-owners",
										"sharing-relation",
										"{{sharing_relation_role}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get API Owner sharing relation status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{leaf_api_url}}/services/usermanagement/api/api-owners/sharing-relation/{{sharing_relation_role}}/{{target_api_owner}}/status",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"usermanagement",
										"api",
										"api-owners",
										"sharing-relation",
										"{{sharing_relation_role}}",
										"{{target_api_owner}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create an API Owner Sharing relation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"receiverApiOwner\": {{receiver_api_owner}}\n}"
								},
								"url": {
									"raw": "https://{{leaf_api_url}}/services/usermanagement/api/api-owners/sharing-relation/receiver",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"usermanagement",
										"api",
										"api-owners",
										"sharing-relation",
										"receiver"
									]
								},
								"description": "Register the URL of your webhook, specifying which events do you want to be alerted about.\n\nThe id of the resource created is returned in the Location header."
							},
							"response": []
						},
						{
							"name": "Update an API Owner sharing relation status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"status\": {{sharing_relation_status}}\n}"
								},
								"url": {
									"raw": "https://{{leaf_api_url}}/services/usermanagement/api/api-owners/sharing-relation/{{sharing_relation_role}}/{{target_api_owner}}",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"usermanagement",
										"api",
										"api-owners",
										"sharing-relation",
										"{{sharing_relation_role}}",
										"{{target_api_owner}}"
									]
								},
								"description": "Register the URL of your webhook, specifying which events do you want to be alerted about.\n\nThe id of the resource created is returned in the Location header."
							},
							"response": []
						},
						{
							"name": "Get LeafUser permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{leaf_api_url}}/services/usermanagement/api/api-owners/sharing-relation/{{sharing_relation_role}}/{{target_api_owner}}/users-permissions/{{leaf_user_id}}",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"usermanagement",
										"api",
										"api-owners",
										"sharing-relation",
										"{{sharing_relation_role}}",
										"{{target_api_owner}}",
										"users-permissions",
										"{{leaf_user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a LeafUser permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"permissions\": {\n        \"FIELDS\": {\n            \"actions\": [\n                \"READ\"\n            ]\n        },\n        \"OPERATIONS\": {\n            \"actions\": [\n                \"READ\"\n            ],\n            \"types\": [\n                \"PLANTED\"\n            ]\n        }\n    }\n}"
								},
								"url": {
									"raw": "https://{{leaf_api_url}}/services/usermanagement/api/api-owners/sharing-relation/receiver/{{receiver_api_owner}}/users-permissions/{{leaf_user_id}}",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"usermanagement",
										"api",
										"api-owners",
										"sharing-relation",
										"receiver",
										"{{receiver_api_owner}}",
										"users-permissions",
										"{{leaf_user_id}}"
									]
								},
								"description": "Register the URL of your webhook, specifying which events do you want to be alerted about.\n\nThe id of the resource created is returned in the Location header."
							},
							"response": []
						},
						{
							"name": "Update LeafUser permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"actions\": [\n        \"READ\"\n    ],\n    \"types\": [\n        \"PLANTED\",\n        \"HARVESTED\"\n    ]\n}"
								},
								"url": {
									"raw": "https://{{leaf_api_url}}/services/usermanagement/api/api-owners/sharing-relation/receiver/{{receiver_api_owner}}/users-permissions/{{leaf_user_id}}/{{sharing_relation_resource}}",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"usermanagement",
										"api",
										"api-owners",
										"sharing-relation",
										"receiver",
										"{{receiver_api_owner}}",
										"users-permissions",
										"{{leaf_user_id}}",
										"{{sharing_relation_resource}}"
									]
								},
								"description": "Register the URL of your webhook, specifying which events do you want to be alerted about.\n\nThe id of the resource created is returned in the Location header."
							},
							"response": []
						},
						{
							"name": "Invalidate receiver's tokens",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{leaf_api_url}}/services/usermanagement/api/api-owners/sharing-relation/{{sharing_relation_role}}/{{target_api_owner}}/invalidate-tokens",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"usermanagement",
										"api",
										"api-owners",
										"sharing-relation",
										"{{sharing_relation_role}}",
										"{{target_api_owner}}",
										"invalidate-tokens"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete LeafUser permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{leaf_api_url}}/services/usermanagement/api/api-owners/sharing-relation/{{sharing_relation_role}}/{{target_api_owner}}/users-permissions/{{leaf_user_id}}",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"usermanagement",
										"api",
										"api-owners",
										"sharing-relation",
										"{{sharing_relation_role}}",
										"{{target_api_owner}}",
										"users-permissions",
										"{{leaf_user_id}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Documentation about the Sharing Endpoints that allows an API Owner to grant permission to access [Fields](https://docs.withleaf.io/docs/field_boundary_management_overview) and [Operations](https://docs.withleaf.io/docs/operations_overview) to other API Owners.\n\nEndFragmen"
				},
				{
					"name": "Leaf Link",
					"item": [
						{
							"name": "API Key",
							"item": [
								{
									"name": "Get all Leaf User API keys",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "Bearer {{leaf_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://{{leaf_api_url}}/services/usermanagement/api/api-keys?leafUserId={{leaf_user_id}}",
											"protocol": "https",
											"host": [
												"{{leaf_api_url}}"
											],
											"path": [
												"services",
												"usermanagement",
												"api",
												"api-keys"
											],
											"query": [
												{
													"key": "leafUserId",
													"value": "{{leaf_user_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a Leaf User API key",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "Bearer {{leaf_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"leafUserId\": \"{{leaf_user_id}}\",\n  \"expiresIn\": 900,\n  \"description\": \"string\"\n}"
										},
										"url": {
											"raw": "https://{{leaf_api_url}}/services/usermanagement/api/api-keys",
											"protocol": "https",
											"host": [
												"{{leaf_api_url}}"
											],
											"path": [
												"services",
												"usermanagement",
												"api",
												"api-keys"
											]
										}
									},
									"response": []
								},
								{
									"name": "Revoke a Leaf User API key",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "Bearer {{leaf_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://{{leaf_api_url}}/services/usermanagement/api/api-keys/{{api_key_id}}",
											"protocol": "https",
											"host": [
												"{{leaf_api_url}}"
											],
											"path": [
												"services",
												"usermanagement",
												"api",
												"api-keys",
												"{{api_key_id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Provider applications info",
							"item": [
								{
									"name": "AgLeader",
									"item": [
										{
											"name": "Get all AgLeader app information",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/app-keys/AgLeader",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"app-keys",
														"AgLeader"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get a AgLeader app information",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/app-keys/AgLeader/{{app_name}}",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"app-keys",
														"AgLeader",
														"{{app_name}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a AgLeader app information",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"privateKey\": \"{{agleader_private_key}}\",\n  \"publicKey\": \"{{agleader_public_key}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/app-keys/AgLeader/{{app_name}}",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"app-keys",
														"AgLeader",
														"{{app_name}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update a AgLeader app information",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"privateKey\": \"{{agleader_private_key}}\",\n  \"publicKey\": \"{{agleader_public_key}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/app-keys/AgLeader/{{app_name}}",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"app-keys",
														"AgLeader",
														"{{app_name}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete a AgLeader app information",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/app-keys/AgLeader/{{app_name}}",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"app-keys",
														"AgLeader",
														"{{app_name}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "CNHi",
									"item": [
										{
											"name": "Get all CNHi app information",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/app-keys/CNHI",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"app-keys",
														"CNHI"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get a CNHi app information",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/app-keys/CNHI/{{app_name}}/{{cnhi_client_environment}}",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"app-keys",
														"CNHI",
														"{{app_name}}",
														"{{cnhi_client_environment}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a CNHi app information",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"clientId\": \"{{cnhi_client_id}}\",\n  \"clientSecret\": \"{{cnhi_client_secret}}\",\n  \"subscriptionKey\": \"{{cnhi_subscription_key}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/app-keys/CNHI/{{app_name}}/{{cnhi_client_environment}}",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"app-keys",
														"CNHI",
														"{{app_name}}",
														"{{cnhi_client_environment}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update a CNHi app information",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"clientId\": \"{{cnhi_client_id}}\",\n  \"clientSecret\": \"{{cnhi_client_secret}}\",\n  \"subscriptionKey\": \"{{cnhi_subscription_key}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/app-keys/CNHI/{{app_name}}/{{cnhi_client_environment}}",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"app-keys",
														"CNHI",
														"{{app_name}}",
														"{{cnhi_client_environment}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete a CNHi app information",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/app-keys/CNHI/{{app_name}}/{{cnhi_client_environment}}",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"app-keys",
														"CNHI",
														"{{app_name}}",
														"{{cnhi_client_environment}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Climate FieldView",
									"item": [
										{
											"name": "Get all ClimateFieldView app information",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/app-keys/ClimateFieldView",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"app-keys",
														"ClimateFieldView"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get a ClimateFieldView app information",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/app-keys/ClimateFieldView/{{app_name}}",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"app-keys",
														"ClimateFieldView",
														"{{app_name}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a ClimateFieldView app information",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"apiKey\": \"{{cfv_api_key}}\",\n  \"clientId\": \"{{cfv_client_id}}\",\n  \"clientSecret\": \"{{cfv_client_secret}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/app-keys/ClimateFieldView/{{app_name}}",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"app-keys",
														"ClimateFieldView",
														"{{app_name}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update a ClimateFieldView app information",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"apiKey\": \"{{cfv_api_key}}\",\n  \"clientId\": \"{{cfv_client_id}}\",\n  \"clientSecret\": \"{{cfv_client_secret}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/app-keys/ClimateFieldView/{{app_name}}",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"app-keys",
														"ClimateFieldView",
														"{{app_name}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete a ClimateFieldView app information",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/app-keys/ClimateFieldView/{{app_name}}",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"app-keys",
														"ClimateFieldView",
														"{{app_name}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "John Deere",
									"item": [
										{
											"name": "Get all John Deere app information",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/app-keys/JohnDeere",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"app-keys",
														"JohnDeere"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get a John Deere app information",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/app-keys/JohnDeere/{{app_name}}/{{jd_client_environment}}",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"app-keys",
														"JohnDeere",
														"{{app_name}}",
														"{{jd_client_environment}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a John Deere app information",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"clientKey\": \"{{jd_client_id}}\",\n  \"clientSecret\": \"{{jd_client_secret}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/app-keys/JohnDeere/{{app_name}}/{{jd_client_environment}}",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"app-keys",
														"JohnDeere",
														"{{app_name}}",
														"{{jd_client_environment}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update a John Deere app information",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"clientKey\": \"{{jd_client_id}}\",\n  \"clientSecret\": \"{{jd_client_secret}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/app-keys/JohnDeere/{{app_name}}/{{jd_client_environment}}",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"app-keys",
														"JohnDeere",
														"{{app_name}}",
														"{{jd_client_environment}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete a John Deere app information",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/app-keys/JohnDeere/{{app_name}}/{{jd_client_environment}}",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"app-keys",
														"JohnDeere",
														"{{app_name}}",
														"{{jd_client_environment}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Trimble",
									"item": [
										{
											"name": "Get all Trimble app information",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/app-keys/Trimble",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"app-keys",
														"Trimble"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get a Trimble app information",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/app-keys/Trimble/{{app_name}}",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"app-keys",
														"Trimble",
														"{{app_name}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a Trimble app information",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"applicationName\": \"{{trimble_app_name}}\",\n  \"clientId\": \"{{trimble_client_id}}\",\n  \"clientSecret\": \"{{trimble_client_secret}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/app-keys/Trimble/{{app_name}}",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"app-keys",
														"Trimble",
														"{{app_name}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update a Trimble app information",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"applicationName\": \"{{trimble_app_name}}\",\n  \"clientId\": \"{{trimble_client_id}}\",\n  \"clientSecret\": \"{{trimble_client_secret}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/app-keys/Trimble/{{app_name}}",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"app-keys",
														"Trimble",
														"{{app_name}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete a Trimble app information",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/app-keys/Trimble/{{app_name}}",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"app-keys",
														"Trimble",
														"{{app_name}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Raven Slingshot",
									"item": [
										{
											"name": "Get all RavenSlingshot app information",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/app-keys/RavenSlingshot",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"app-keys",
														"RavenSlingshot"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get a RavenSlingshot app information",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/app-keys/RavenSlingshot/{{app_name}}",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"app-keys",
														"RavenSlingshot",
														"{{app_name}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a RavenSlingshot app information",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"apiKey\": \"{{ravenslingshot_api_key}}\",\n  \"sharedSecret\": \"{{ravenslingshot_shared_secret}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/app-keys/RavenSlingshot/{{app_name}}",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"app-keys",
														"RavenSlingshot",
														"{{app_name}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update a RavenSlingshot app information",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"apiKey\": \"{{ravenslingshot_api_key}}\",\n  \"sharedSecret\": \"{{ravenslingshot_shared_secret}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/app-keys/RavenSlingshot/{{app_name}}",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"app-keys",
														"RavenSlingshot",
														"{{app_name}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete a RavenSlingshot app information",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
														"key": "Authorization",
														"value": "Bearer {{leaf_token}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "https://{{leaf_api_url}}/services/usermanagement/api/app-keys/RavenSlingshot/{{app_name}}",
													"protocol": "https",
													"host": [
														"{{leaf_api_url}}"
													],
													"path": [
														"services",
														"usermanagement",
														"api",
														"app-keys",
														"RavenSlingshot",
														"{{app_name}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Magic Link",
					"item": [
						{
							"name": "Provider",
							"item": [
								{
									"name": "Get All Provider Magic Link",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "Bearer {{leaf_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://{{leaf_api_url}}/services/widgets/api/magic-link/provider",
											"protocol": "https",
											"host": [
												"{{leaf_api_url}}"
											],
											"path": [
												"services",
												"widgets",
												"api",
												"magic-link",
												"provider"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get a Provider Magic Link",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "Bearer {{leaf_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://{{leaf_api_url}}/services/widgets/api/magic-link/provider/{{magic_link_id}}",
											"protocol": "https",
											"host": [
												"{{leaf_api_url}}"
											],
											"path": [
												"services",
												"widgets",
												"api",
												"magic-link",
												"provider",
												"{{magic_link_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a Provider Magic Link",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "Bearer {{leaf_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"expiresIn\": 900,\n  \"allowedProviders\": [\n    \"All\"\n  ],\n  \"settings\": {\n    \"backgroundColor\": \"#F5F5F5\",\n    \"headerImage\": \"URL\",\n    \"companyLogo\": \"URL\",\n    \"companyName\": \"companyName\",\n    \"showLeafUserName\": \"false\",\n    \"disconnectEnabled\": \"false\"\n  }\n}"
										},
										"url": {
											"raw": "https://{{leaf_api_url}}/services/widgets/api/magic-link/users/{{leaf_user_id}}/provider",
											"protocol": "https",
											"host": [
												"{{leaf_api_url}}"
											],
											"path": [
												"services",
												"widgets",
												"api",
												"magic-link",
												"users",
												"{{leaf_user_id}}",
												"provider"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete a Provider Magic Link",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "Bearer {{leaf_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://{{leaf_api_url}}/services/widgets/api/magic-link/provider/{{magic_link_id}}",
											"protocol": "https",
											"host": [
												"{{leaf_api_url}}"
											],
											"path": [
												"services",
												"widgets",
												"api",
												"magic-link",
												"provider",
												"{{magic_link_id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Authentication",
							"item": [
								{
									"name": "Get All Authentication Magic Link",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "Bearer {{leaf_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://{{leaf_api_url}}/services/widgets/api/magic-link/authentication",
											"protocol": "https",
											"host": [
												"{{leaf_api_url}}"
											],
											"path": [
												"services",
												"widgets",
												"api",
												"magic-link",
												"authentication"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get An Authentication Magic Link",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "Bearer {{leaf_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://{{leaf_api_url}}/services/widgets/api/magic-link/authentication/{{magic_link_id}}",
											"protocol": "https",
											"host": [
												"{{leaf_api_url}}"
											],
											"path": [
												"services",
												"widgets",
												"api",
												"magic-link",
												"authentication",
												"{{magic_link_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create An Authentication Magic Link",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "Bearer {{leaf_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"expiresIn\": 900,\n  \"provider\": \"providerName\",\n  \"settings\": {\n    \"backgroundColor\": \"#F5F5F5\",\n    \"headerImage\": \"URL\",\n    \"companyLogo\": \"URL\",\n    \"companyName\": \"companyName\",\n    \"showLeafUserName\": \"false\",\n    \"disconnectEnabled\": \"false\"\n  }\n}"
										},
										"url": {
											"raw": "https://{{leaf_api_url}}/services/widgets/api/magic-link/users/{{leaf_user_id}}/authentication",
											"protocol": "https",
											"host": [
												"{{leaf_api_url}}"
											],
											"path": [
												"services",
												"widgets",
												"api",
												"magic-link",
												"users",
												"{{leaf_user_id}}",
												"authentication"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete An Authentication Magic Link",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "Bearer {{leaf_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://{{leaf_api_url}}/services/widgets/api/magic-link/authentication/{{magic_link_id}}",
											"protocol": "https",
											"host": [
												"{{leaf_api_url}}"
											],
											"path": [
												"services",
												"widgets",
												"api",
												"magic-link",
												"authentication",
												"{{magic_link_id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "File Upload",
							"item": [
								{
									"name": "Get All File Upload Magic Link",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "Bearer {{leaf_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://{{leaf_api_url}}/services/widgets/api/magic-link/file-upload",
											"protocol": "https",
											"host": [
												"{{leaf_api_url}}"
											],
											"path": [
												"services",
												"widgets",
												"api",
												"magic-link",
												"file-upload"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get a File Upload Magic Link",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "Bearer {{leaf_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://{{leaf_api_url}}/services/widgets/api/magic-link/file-upload/{{magic_link_id}}",
											"protocol": "https",
											"host": [
												"{{leaf_api_url}}"
											],
											"path": [
												"services",
												"widgets",
												"api",
												"magic-link",
												"file-upload",
												"{{magic_link_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a File Upload Magic Link",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "Bearer {{leaf_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"expiresIn\": 900,\n  \"settings\": {\n    \"backgroundColor\": \"#F5F5F5\",\n    \"headerImage\": \"URL\",\n    \"companyLogo\": \"URL\",\n    \"companyName\": \"companyName\",\n    \"showLeafUserName\": \"false\",\n    \"disconnectEnabled\": \"false\"\n  }\n}"
										},
										"url": {
											"raw": "https://{{leaf_api_url}}/services/widgets/api/magic-link/users/{{leaf_user_id}}/file-upload",
											"protocol": "https",
											"host": [
												"{{leaf_api_url}}"
											],
											"path": [
												"services",
												"widgets",
												"api",
												"magic-link",
												"users",
												"{{leaf_user_id}}",
												"file-upload"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete a File Upload Magic Link",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "Bearer {{leaf_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://{{leaf_api_url}}/services/widgets/api/magic-link/file-upload/{{magic_link_id}}",
											"protocol": "https",
											"host": [
												"{{leaf_api_url}}"
											],
											"path": [
												"services",
												"widgets",
												"api",
												"magic-link",
												"file-upload",
												"{{magic_link_id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Magic Link with Leaf User Creation",
							"item": [
								{
									"name": "Create a Provider Magic Link",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"leaf_user_id\", jsonData.leafUserId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "Bearer {{leaf_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"user_name\",\n  \"email\": \"user_email\",\n  \"externalId\": \"external_id\",\n  \"expiresIn\": 900,\n  \"allowedProviders\": [\n    \"All\"\n  ],\n  \"settings\": {\n    \"backgroundColor\": \"#F5F5F5\",\n    \"headerImage\": \"URL\",\n    \"companyLogo\": \"URL\",\n    \"companyName\": \"companyName\",\n    \"showLeafUserName\": \"false\",\n    \"disconnectEnabled\": \"false\"\n  }\n}"
										},
										"url": {
											"raw": "https://{{leaf_api_url}}/services/widgets/api/magic-link/provider",
											"protocol": "https",
											"host": [
												"{{leaf_api_url}}"
											],
											"path": [
												"services",
												"widgets",
												"api",
												"magic-link",
												"provider"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a Authentication Magic Link",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"leaf_user_id\", jsonData.leafUserId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "Bearer {{leaf_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"user_name\",\n  \"email\": \"user_email\",\n  \"externalId\": \"external_id\",\n  \"expiresIn\": 900,\n  \"provider\": \"provider_name\",\n  \"settings\": {\n    \"backgroundColor\": \"#F5F5F5\",\n    \"headerImage\": \"URL\",\n    \"companyLogo\": \"URL\",\n    \"companyName\": \"companyName\",\n    \"showLeafUserName\": \"false\",\n    \"disconnectEnabled\": \"false\"\n  }\n}"
										},
										"url": {
											"raw": "https://{{leaf_api_url}}/services/widgets/api/magic-link/authentication",
											"protocol": "https",
											"host": [
												"{{leaf_api_url}}"
											],
											"path": [
												"services",
												"widgets",
												"api",
												"magic-link",
												"authentication"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a File Upload Magic Link",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"leaf_user_id\", jsonData.leafUserId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "Bearer {{leaf_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"user_name\",\n  \"email\": \"user_email\",\n  \"externalId\": \"external_id\",\n  \"expiresIn\": 900,\n  \"settings\": {\n    \"backgroundColor\": \"#F5F5F5\",\n    \"headerImage\": \"URL\",\n    \"companyLogo\": \"URL\",\n    \"companyName\": \"companyName\",\n    \"showLeafUserName\": \"false\",\n    \"disconnectEnabled\": \"false\"\n  }\n}"
										},
										"url": {
											"raw": "https://{{leaf_api_url}}/services/widgets/api/magic-link/file-upload",
											"protocol": "https",
											"host": [
												"{{leaf_api_url}}"
											],
											"path": [
												"services",
												"widgets",
												"api",
												"magic-link",
												"file-upload"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Integrations",
					"item": [
						{
							"name": "Get Integrations Resources",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{leaf_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{leaf_api_url}}/services/integrations/api/resources",
									"protocol": "https",
									"host": [
										"{{leaf_api_url}}"
									],
									"path": [
										"services",
										"integrations",
										"api",
										"resources"
									],
									"query": [
										{
											"key": "leafUserId",
											"value": "{{leaf_user_id}}",
											"description": "filter by leaf_user",
											"disabled": true
										},
										{
											"key": "provider",
											"value": "JohnDeere",
											"description": "JohnDeere, ClimateFieldView, Leaf, CNHi, AgLeader or Trimble",
											"disabled": true
										},
										{
											"key": "page",
											"value": "0",
											"description": "Pagination parameter for selecting the page of the result (integer)",
											"disabled": true
										},
										{
											"key": "size",
											"value": "100",
											"description": "Pagination parameter that specifies the size of each page (integer)",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{leaf_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "leaf_api_url",
			"value": "api.withleaf.io"
		},
		{
			"key": "leaf_auth_jd",
			"value": "johndeere-oauth2-helper.withleaf.io"
		},
		{
			"key": "leaf_auth_cfv",
			"value": "cfv-oauth2-helper.withleaf.io"
		},
		{
			"key": "leaf_auth_cnhi",
			"value": "cnhi-oauth2-helper.withleaf.io"
		},
		{
			"key": "leaf_auth_raven",
			"value": "raven-oauth2-helper.withleaf.io"
		},
		{
			"key": "leaf_auth_trimble",
			"value": "trimble-oauth2-helper.withleaf.io"
		},
		{
			"key": "leaf_auth_helper",
			"value": "oauth2-helper.withleaf.io",
			"type": "string"
		}
	]
}